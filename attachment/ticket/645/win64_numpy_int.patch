<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  
    



    <head>
    <title>
      win64_numpy_int.patch on Ticket #645 – Attachment
     – FiPy
    </title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/fipy/search" />
        <link rel="help" href="/fipy/wiki/TracGuide" />
        <link rel="alternate" href="/fipy/raw-attachment/ticket/645/win64_numpy_int.patch" type="text/x-diff; charset=iso-8859-15" title="Original Format" />
        <link rel="up" href="/fipy/ticket/645" title="Ticket #645" />
        <link rel="start" href="/fipy/wiki" />
        <link rel="stylesheet" href="/trac_1.0_htdocs/css/trac.css" type="text/css" /><link rel="stylesheet" href="/trac_1.0_htdocs/css/diff.css" type="text/css" /><link rel="stylesheet" href="/trac_1.0_htdocs/css/code.css" type="text/css" />
        <link rel="shortcut icon" href="/fipy/chrome/common/trac.ico" type="image/x-icon" />
        <link rel="icon" href="/fipy/chrome/common/trac.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/fipy/search/opensearch" title="Search FiPy" />
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/jquery.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/babel.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/trac.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/search.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/diff.js"></script>
      <script type="text/javascript" src="/trac_1.0_htdocs/js/folding.js"></script>
      <script type="text/javascript">
        jQuery(document).ready(function($) {
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
        });
      </script>
        <link rel="stylesheet" type="text/css" href="/trac_1.0_htdocs//css/matdlosi.css" />
	<style type="text/css">
	body {width: 95%;}
	</style>
    </head>
    <body>
    <div id="banner">
      <div id="header">
            <div id="topLogo">
                <img src="/trac_1.0_htdocs//hdr_main.jpg" alt="Main Header" usemap="#MatDL_Banner_Narrow_Map" />
                <map name="MatDL_Banner_Narrow_Map">
                    <area shape="rect" alt="Materials Digital Library" coords="44,53,263,70" href="http://matdl.org" />
                    <area shape="rect" alt="NSDL logo" coords="675,43,740,71" href="http://nsdl.org" />
                    <area shape="rect" alt="NSF logo" coords="686,0,731,43" href="http://nsf.gov" />
                    <area shape="rect" alt="MatDL logo" coords="44,0,158,53" href="http://matdl.org" />
                </map>
                <br />
                <br />
            </div>
            <div id="projheader">
                <h1 style="margin: 0px;">
                    <img style="width: 50px;" src="/fipy/chrome/site/fipy-logo.png" alt="FiPy" />
                FiPy: A Finite Volume PDE Solver Using Python</h1>
                <a href="http://www.ctcms.nist.gov/fipy">FiPy Home</a>
            </div>
        </div>
      <form id="search" action="/fipy/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/fipy/login">Login</a></li><li><a href="/fipy/wiki/TracGuide">Help/Guide</a></li><li><a href="/fipy/about">About Trac</a></li><li><a href="http://matforge.org">Matforge Home</a></li><li><a href="/fipy/register">Register</a></li><li><a href="http://matforge.org/participate.html">Participate</a></li><li class="last"><a href="/fipy/prefs">Preferences</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/fipy/wiki">Wiki</a></li><li><a href="/fipy/blog">Blog</a></li><li><a href="/fipy/timeline">Timeline</a></li><li><a href="/fipy/roadmap">Roadmap</a></li><li><a href="/fipy/browser">Browse Source</a></li><li><a href="/fipy/report">View Tickets</a></li><li><a href="http://build.cmi.kent.edu:8010/waterfall">Buildbot</a></li><li class="last"><a href="http://build.cmi.kent.edu/codespeed">Codespeed</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
        <ul>
          <li class="last first"><a href="/fipy/ticket/645">Back to Ticket #645</a></li>
        </ul>
        <hr />
      </div>
    <div id="content" class="attachment">
        <h1><a href="/fipy/ticket/645">Ticket #645</a>: win64_numpy_int.patch</h1>
        <table id="info" summary="Description">
          <tbody>
            <tr>
              <th scope="col">File win64_numpy_int.patch,
                <span title="6335 bytes">6.2 KB</span>
                (added by guyer, <a class="timeline" href="/fipy/timeline?from=2013-07-03T09%3A53%3A37-04%3A00&amp;precision=second" title="See timeline at 07/03/13 09:53:37">14 months ago</a>)</th>
            </tr>
            <tr>
              <td class="message searchable">
                <p>
patch for <tt>int</tt> being 32-bits on 64-bit Windows
</p>

              </td>
            </tr>
          </tbody>
        </table>
        <div id="preview" class="searchable">
          
  <div class="diff">
  <ul class="entries">
      <li class="entry">
        <h2>
          <a>fipy/meshes/abstractMesh.py</a>
        </h2>
        <pre>diff --git a/fipy/meshes/abstractMesh.py b/fipy/meshes/abstractMesh.py
index 5e888f1..ddd7908 100644</pre>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File a/fipy/meshes/abstractMesh.py">
                      a
                  </th>
                  <th title="File b/fipy/meshes/abstractMesh.py">
                      b
                  </th>
                  <td><em> class AbstractMesh(object):</em> </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>407</th><th>407</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span> </td>
                  </tr><tr>
                          <th>408</th><th>408</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # map other's Vertex IDs to new Vertex IDs, </span> </td>
                  </tr><tr>
                          <th>409</th><th>409</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # accounting for overlaps with self's Vertex IDs</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>410</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; vertex_map = numerix.empty(otherNumVertices, dtype=<del>int</del>)</span> </td>
                      </tr>
                      <tr class="last">
                        <th> </th><th>410</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; vertex_map = numerix.empty(otherNumVertices, dtype=<ins>numerix.INT_DTYPE</ins>)</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>411</th><th>411</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; verticesToAdd = numerix.delete(numerix.arange(otherNumVertices), vertexCorrelates[1])</span> </td>
                  </tr><tr>
                          <th>412</th><th>412</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; vertex_map[verticesToAdd] = numerix.arange(otherNumVertices - len(vertexCorrelates[1])) + selfNumVertices</span> </td>
                  </tr><tr>
                          <th>413</th><th>413</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; vertex_map[vertexCorrelates[1]] = vertexCorrelates[0]</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L457">…</a></th>
                  <th><a href="#L457">…</a></th>
                  <td><em> class AbstractMesh(object):</em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>457</th><th>457</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>458</th><th>458</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # map other's Face IDs to new Face IDs, </span> </td>
                  </tr><tr>
                          <th>459</th><th>459</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # accounting for overlaps with self's Face IDs</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>460</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; face_map = numerix.empty(otherNumFaces, dtype=<del>int</del>)</span> </td>
                      </tr>
                      <tr class="last">
                        <th> </th><th>460</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; face_map = numerix.empty(otherNumFaces, dtype=<ins>numerix.INT_DTYPE</ins>)</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>461</th><th>461</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; facesToAdd = numerix.delete(numerix.arange(otherNumFaces), faceCorrelates[1])</span> </td>
                  </tr><tr>
                          <th>462</th><th>462</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; face_map[facesToAdd] = numerix.arange(otherNumFaces - len(faceCorrelates[1])) + selfNumFaces</span> </td>
                  </tr><tr>
                          <th>463</th><th>463</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; face_map[faceCorrelates[1]] = faceCorrelates[0]</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L1083">…</a></th>
                  <th><a href="#L1083">…</a></th>
                  <td><em> class AbstractMesh(object):</em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>1083</th><th>1083</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if numerix.MA.is_masked(self.cellFaceIDs):</span> </td>
                  </tr><tr>
                          <th>1084</th><th>1084</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; facesPerCell = (~numerix.MA.getmask(self.cellFaceIDs)).sum(axis=0)</span> </td>
                  </tr><tr>
                          <th>1085</th><th>1085</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; else:</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>1086</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; facesPerCell = numerix.empty((self.numberOfCells,), dtype=<del>int</del>)</span> </td>
                      </tr>
                      <tr class="last">
                        <th> </th><th>1086</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; facesPerCell = numerix.empty((self.numberOfCells,), dtype=<ins>numerix.INT_DTYPE</ins>)</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>1087</th><th>1087</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; facesPerCell[:] = self._maxFacesPerCell</span> </td>
                  </tr><tr>
                          <th>1088</th><th>1088</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; return facesPerCell</span> </td>
                  </tr><tr>
                          <th>1089</th><th>1089</th><td class="l"><span></span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L1097">…</a></th>
                  <th><a href="#L1097">…</a></th>
                  <td><em> class AbstractMesh(object):</em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>1097</th><th>1097</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if numerix.MA.is_masked(cellFaceVertices):</span> </td>
                  </tr><tr>
                          <th>1098</th><th>1098</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nodesPerFace = (~cellFaceVertices.mask).sum(axis=0)</span> </td>
                  </tr><tr>
                          <th>1099</th><th>1099</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; else:</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>1100</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nodesPerFace = numerix.empty(cellFaceVertices.shape[1:], dtype=<del>int</del>)</span> </td>
                      </tr>
                      <tr class="last">
                        <th> </th><th>1100</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nodesPerFace = numerix.empty(cellFaceVertices.shape[1:], dtype=<ins>numerix.INT_DTYPE</ins>)</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>1101</th><th>1101</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nodesPerFace[:] = self.faceVertexIDs.shape[0]</span> </td>
                  </tr><tr>
                          <th>1102</th><th>1102</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span> </td>
                  </tr><tr>
                          <th>1103</th><th>1103</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; return nodesPerFace</span> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>fipy/meshes/gmshMesh.py</a>
        </h2>
        <pre>diff --git a/fipy/meshes/gmshMesh.py b/fipy/meshes/gmshMesh.py
index 0fadb77..02d2fd0 100755</pre>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File a/fipy/meshes/gmshMesh.py">
                      a
                  </th>
                  <th title="File b/fipy/meshes/gmshMesh.py">
                      b
                  </th>
                  <td><em> class MSHFile(GmshFile):</em> </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>654</th><th>654</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; maxFaceLen = max([len(f) for f in uniqueFaces])</span> </td>
                  </tr><tr>
                          <th>655</th><th>655</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; uniqueFaces = [[-1] * (maxFaceLen - len(f)) + f for f in uniqueFaces]</span> </td>
                  </tr><tr>
                          <th>656</th><th>656</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>657</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; facesToVertices = nx.array(uniqueFaces, dtype=<del>int</del>)</span> </td>
                      </tr>
                      <tr class="last">
                        <th> </th><th>657</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; facesToVertices = nx.array(uniqueFaces, dtype=<ins>nx.INT_DTYPE</ins>)</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>658</th><th>658</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>659</th><th>659</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; return facesToVertices.swapaxes(0,1)[::-1], cellsToFaces.swapaxes(0,1).copy('C'), facesDict</span> </td>
                  </tr><tr>
                          <th>660</th><th>660</th><td class="l"><span></span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L857">…</a></th>
                  <th><a href="#L857">…</a></th>
                  <td><em> class MSHFile(GmshFile):</em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>857</th><th>857</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # convert lists of cell vertices to a properly oriented masked array</span> </td>
                  </tr><tr>
                          <th>858</th><th>858</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; maxVerts = max([len(v) for v in cellsToVertIDs])</span> </td>
                  </tr><tr>
                          <th>859</th><th>859</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # ticket:539 - NumPy 1.7 casts to array before concatenation and empty array defaults to float</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>860</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; cellsToVertIDs = [nx.concatenate((v, nx.array([-1] * (maxVerts-len(v)), dtype=<del>int</del>))) for v in cellsToVertIDs]</span> </td>
                      </tr>
                      <tr class="last">
                        <th> </th><th>860</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; cellsToVertIDs = [nx.concatenate((v, nx.array([-1] * (maxVerts-len(v)), dtype=<ins>nx.INT_DTYPE</ins>))) for v in cellsToVertIDs]</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>861</th><th>861</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; cellsToVertIDs = nx.MA.masked_equal(cellsToVertIDs, value=-1).swapaxes(0,1)</span> </td>
                  </tr><tr>
                          <th>862</th><th>862</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span> </td>
                  </tr><tr>
                          <th>863</th><th>863</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; parprint("Done with cells and faces.")</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L1001">…</a></th>
                  <th><a href="#L1001">…</a></th>
                  <td><em> class MSHFile(GmshFile):</em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>1001</th><th>1001</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; because we want to avoid loading the entire msh file into memory.</span> </td>
                  </tr><tr>
                          <th>1002</th><th>1002</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; """</span> </td>
                  </tr><tr>
                          <th>1003</th><th>1003</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; allVerts&nbsp; &nbsp; &nbsp;= [v for c in cellsToGmshVerts for v in c] # flatten</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>1004</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; allVerts&nbsp; &nbsp; &nbsp;= nx.unique(nx.array(allVerts, dtype=<del>int</del>)) # remove dups</span> </td>
                      </tr>
                      <tr class="last">
                        <th> </th><th>1004</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; allVerts&nbsp; &nbsp; &nbsp;= nx.unique(nx.array(allVerts, dtype=<ins>nx.INT_DTYPE</ins>)) # remove dups</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>1005</th><th>1005</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; allVerts&nbsp; &nbsp; &nbsp;= nx.sort(allVerts)</span> </td>
                  </tr><tr>
                          <th>1006</th><th>1006</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; maxVertIdx&nbsp; &nbsp;= allVerts[-1] + 1 # add one to offset zero</span> </td>
                  </tr><tr>
                          <th>1007</th><th>1007</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; vertGIDtoIdx = nx.ones(maxVertIdx, 'l') * -1 # gmsh ID -&gt; vertexCoords idx</span> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>fipy/meshes/topologies/meshTopology.py</a>
        </h2>
        <pre>diff --git a/fipy/meshes/topologies/meshTopology.py b/fipy/meshes/topologies/meshTopology.py
index fb23f76..561fccc 100644</pre>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File a/fipy/meshes/topologies/meshTopology.py">
                      a
                  </th>
                  <th title="File b/fipy/meshes/topologies/meshTopology.py">
                      b
                  </th>
                  <td><em> class _MeshTopology(_AbstractTopology):</em> </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>61</th><th>61</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; def faceCountsMatch(targetCounts):</span> </td>
                  </tr><tr>
                          <th>62</th><th>62</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if len(targetCounts) &gt; nodesPerFace.shape[0]:</span> </td>
                  </tr><tr>
                          <th>63</th><th>63</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # pad nodesPerFace with zeros</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>64</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; paddedNodesPerFace = numerix.zeros((len(targetCounts), nodesPerFace.shape[1]), dtype=<del>int</del>)</span> </td>
                      </tr>
                      <tr class="last">
                        <th> </th><th>64</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; paddedNodesPerFace = numerix.zeros((len(targetCounts), nodesPerFace.shape[1]), dtype=<ins>numerix.INT_DTYPE</ins>)</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>65</th><th>65</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; paddedNodesPerFace[:nodesPerFace.shape[0], :] = nodesPerFace</span> </td>
                  </tr><tr>
                          <th>66</th><th>66</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span> </td>
                  </tr><tr>
                          <th>67</th><th>67</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; paddedTargetCounts = numerix.array(targetCounts)[..., numerix.newaxis]</span> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>fipy/tools/numerix.py</a>
        </h2>
        <pre>diff --git a/fipy/tools/numerix.py b/fipy/tools/numerix.py
index 9e5d617..2ae6889 100644</pre>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File a/fipy/tools/numerix.py">
                      a
                  </th>
                  <th title="File b/fipy/tools/numerix.py">
                      b
                  </th>
                  <td><em> Take the tangent of an array.</em> </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>74</th><th>74</th><td class="l"><span>__docformat__ = 'restructuredtext'</span> </td>
                  </tr><tr>
                          <th>75</th><th>75</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>76</th><th>76</th><td class="l"><span>import numpy as NUMERIX</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>77</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>78</th><td class="r"><ins># On all platforms except Win64, int will be either 32 bit </ins> </td>
                  </tr><tr>
                          <th> </th><th>79</th><td class="r"><ins># or 64 bit depending on the platform and the Python;</ins> </td>
                  </tr><tr>
                          <th> </th><th>80</th><td class="r"><ins># however, on Win64 (and python 64-bit), int will always be</ins> </td>
                  </tr><tr>
                          <th> </th><th>81</th><td class="r"><ins># 32-bit. This is a known issue, and StackOverflow has many</ins> </td>
                  </tr><tr>
                          <th> </th><th>82</th><td class="r"><ins># questions and answers.&nbsp; However, we still need to do </ins> </td>
                  </tr><tr>
                          <th> </th><th>83</th><td class="r"><ins># something about it, so instead of relying on the default </ins> </td>
                  </tr><tr>
                          <th> </th><th>84</th><td class="r"><ins># mapping, we'll be explicit:</ins> </td>
                  </tr><tr>
                          <th> </th><th>85</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>86</th><td class="r"><ins>import platform</ins> </td>
                  </tr><tr>
                          <th> </th><th>87</th><td class="r"><ins>arch=platform.architecture()[0]</ins> </td>
                  </tr><tr>
                          <th> </th><th>88</th><td class="r"><ins>if arch == '32bit':</ins> </td>
                  </tr><tr>
                          <th> </th><th>89</th><td class="r"><ins>&nbsp; &nbsp; INT_DTYPE=NUMERIX.int32</ins> </td>
                  </tr><tr>
                          <th> </th><th>90</th><td class="r"><ins>elif arch == '64bit':</ins> </td>
                  </tr><tr>
                          <th> </th><th>91</th><td class="r"><ins>&nbsp; &nbsp; INT_DTYPE=NUMERIX.int64</ins> </td>
                  </tr><tr>
                          <th> </th><th>92</th><td class="r"><ins>else:</ins> </td>
                  </tr><tr>
                          <th> </th><th>93</th><td class="r"><ins>&nbsp; &nbsp; raise Exception('Cannot set integer dtype because architecture is unknown.')</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>94</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>77</th><th>95</th><td class="l"><span>from numpy.core import umath</span> </td>
                  </tr><tr>
                          <th>78</th><th>96</th><td class="l"><span>from numpy import newaxis as NewAxis</span> </td>
                  </tr><tr>
                          <th>79</th><th>97</th><td class="l"><span>from numpy import *</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L494">…</a></th>
                  <th><a href="#L512">…</a></th>
                  <td><em> def nearest(data, points, max_mem=1e8):</em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>494</th><th>512</th><td class="l"><span>&nbsp; &nbsp; </span> </td>
                  </tr><tr>
                          <th>495</th><th>513</th><td class="l"><span>&nbsp; &nbsp; numChunks = int(round(D * N * data.itemsize * M / max_mem + 0.5))</span> </td>
                  </tr><tr>
                          <th>496</th><th>514</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>497</th><th> </th><td class="l"><span>&nbsp; &nbsp; nearestIndices = empty((M,), dtype=<del>int</del>)</span> </td>
                      </tr>
                      <tr class="last">
                        <th> </th><th>515</th><td class="r"><span>&nbsp; &nbsp; nearestIndices = empty((M,), dtype=<ins>INT_DTYPE</ins>)</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>498</th><th>516</th><td class="l"><span>&nbsp; &nbsp; for chunk in array_split(arange(points.shape[-1]), numChunks):</span> </td>
                  </tr><tr>
                          <th>499</th><th>517</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # last chunk can be empty, but numpy (1.5.0.dev8716, anyway)</span> </td>
                  </tr><tr>
                          <th>500</th><th>518</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # returns array([], dtype=float64), which can't be used for indexing</span> </td>
                  </tr>
            </tbody>
        </table>
      </li>
  </ul>
</div>

        </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/fipy/raw-attachment/ticket/645/win64_numpy_int.patch">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en">
            <div id="projfooter"><!-- Project specific footer start -->
                <script type="text/javascript"> if (window.runOnloadHook) runOnloadHook();</script>
                <script type="text/javascript">
                    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
                    document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
                </script>
                <script type="text/javascript">
                    var pageTracker = _gat._getTracker("UA-2981268-9");
                    pageTracker._initData();
                    pageTracker._trackPageview();
                </script>
            </div><!-- Project specific footer end -->
            <div id="footer_banner">
                <img src="/trac_1.0_htdocs//footer.gif" width="840" height="45" border="0" usemap="#footer" />
                <map name="footer" id="footer">
                    <area shape="rect" coords="2,3,133,42" href="http://www.kent.edu" target="_blank" alt="Kent State University" />
                    <area shape="rect" coords="137,3,240,41" href="http://www.nist.gov" target="_blank" alt="NIST" />
                    <area shape="rect" coords="244,3,372,39" href="http://www.mit.edu" target="_blank" alt="MIT" />
                    <area shape="rect" coords="376,5,606,41" href="http://www.umich.edu" target="_blank" alt="University of Michigan" />
                    <area shape="rect" coords="613,5,715,38" href="http://www.purdue.edu" target="_blank" alt="Purdue" />
                    <area shape="rect" coords="718,4,833,41" href="http://www.iastate.edu" target="_blank" alt="Iowa State University" />
                </map>
            </div>
            <br />
            <div id="altlinks">
                <br />
                <ul>
                    <li><a href="http://matdl.org/repository/about.htm" class="last first"> About </a></li>
                    <li><a href="http://matdl.org/repository/tou.htm" class="last first"> Terms of Use </a></li>
                    <li><a href="http://matdl.org/repository/contact.htm" class="last first"> Contact </a></li>
                    <li><a href="http://matdl.org/repository/priv.htm" class="last first"> Privacy Policy </a></li>
                </ul>
            </div>
	    <div id="tracfooter" lang="en" xml:lang="en">
	    <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/fipy/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
	    <p class="left">
	    Powered by <a href="/fipy/about"><strong>Trac 1.0</strong></a><br />
	    By <a href="http://www.edgewall.org/">Edgewall Software</a>.
	    </p>
	    <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
	    </div>
        </div>
    </body>
</html>