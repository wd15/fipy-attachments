<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  
    



    <head>
    <title>
      fullperiodic2d.patch on Ticket #298 – Attachment
     – FiPy
    </title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/fipy/search" />
        <link rel="help" href="/fipy/wiki/TracGuide" />
        <link rel="alternate" href="/fipy/raw-attachment/ticket/298/fullperiodic2d.patch" type="text/x-diff; charset=iso-8859-15" title="Original Format" />
        <link rel="up" href="/fipy/ticket/298" title="Ticket #298" />
        <link rel="start" href="/fipy/wiki" />
        <link rel="stylesheet" href="/trac_1.0_htdocs/css/trac.css" type="text/css" /><link rel="stylesheet" href="/trac_1.0_htdocs/css/diff.css" type="text/css" /><link rel="stylesheet" href="/trac_1.0_htdocs/css/code.css" type="text/css" />
        <link rel="shortcut icon" href="/fipy/chrome/common/trac.ico" type="image/x-icon" />
        <link rel="icon" href="/fipy/chrome/common/trac.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/fipy/search/opensearch" title="Search FiPy" />
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/jquery.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/babel.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/trac.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/search.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/diff.js"></script>
      <script type="text/javascript" src="/trac_1.0_htdocs/js/folding.js"></script>
      <script type="text/javascript">
        jQuery(document).ready(function($) {
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
        });
      </script>
        <link rel="stylesheet" type="text/css" href="/trac_1.0_htdocs//css/matdlosi.css" />
	<style type="text/css">
	body {width: 95%;}
	</style>
    </head>
    <body>
    <div id="banner">
      <div id="header">
            <div id="topLogo">
                <img src="/trac_1.0_htdocs//hdr_main.jpg" alt="Main Header" usemap="#MatDL_Banner_Narrow_Map" />
                <map name="MatDL_Banner_Narrow_Map">
                    <area shape="rect" alt="Materials Digital Library" coords="44,53,263,70" href="http://matdl.org" />
                    <area shape="rect" alt="NSDL logo" coords="675,43,740,71" href="http://nsdl.org" />
                    <area shape="rect" alt="NSF logo" coords="686,0,731,43" href="http://nsf.gov" />
                    <area shape="rect" alt="MatDL logo" coords="44,0,158,53" href="http://matdl.org" />
                </map>
                <br />
                <br />
            </div>
            <div id="projheader">
                <h1 style="margin: 0px;">
                    <img style="width: 50px;" src="/fipy/chrome/site/fipy-logo.png" alt="FiPy" />
                FiPy: A Finite Volume PDE Solver Using Python</h1>
                <a href="http://www.ctcms.nist.gov/fipy">FiPy Home</a>
            </div>
        </div>
      <form id="search" action="/fipy/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/fipy/login">Login</a></li><li><a href="/fipy/wiki/TracGuide">Help/Guide</a></li><li><a href="/fipy/about">About Trac</a></li><li><a href="http://matforge.org">Matforge Home</a></li><li><a href="/fipy/register">Register</a></li><li><a href="http://matforge.org/participate.html">Participate</a></li><li class="last"><a href="/fipy/prefs">Preferences</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/fipy/wiki">Wiki</a></li><li><a href="/fipy/blog">Blog</a></li><li><a href="/fipy/timeline">Timeline</a></li><li><a href="/fipy/roadmap">Roadmap</a></li><li><a href="/fipy/browser">Browse Source</a></li><li><a href="/fipy/report">View Tickets</a></li><li><a href="http://build.cmi.kent.edu:8010/waterfall">Buildbot</a></li><li class="last"><a href="http://build.cmi.kent.edu/codespeed">Codespeed</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
        <ul>
          <li class="last first"><a href="/fipy/ticket/298">Back to Ticket #298</a></li>
        </ul>
        <hr />
      </div>
    <div id="content" class="attachment">
        <h1><a href="/fipy/ticket/298">Ticket #298</a>: fullperiodic2d.patch</h1>
        <table id="info" summary="Description">
          <tbody>
            <tr>
              <th scope="col">File fullperiodic2d.patch,
                <span title="10465 bytes">10.2 KB</span>
                (added by benny.malengier@…, <a class="timeline" href="/fipy/timeline?from=2010-07-01T09%3A04%3A04-04%3A00&amp;precision=second" title="See timeline at 07/01/10 09:04:04">4 years ago</a>)</th>
            </tr>
            <tr>
              <td class="message searchable">
                
              </td>
            </tr>
          </tbody>
        </table>
        <div id="preview" class="searchable">
          
  <div class="diff">
  <ul class="entries">
      <li class="entry">
        <h2>
          <a>meshes/common/mesh.py</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File meshes/common/mesh.py (revision 3646)">
                  </th>
                  <th title="File meshes/common/mesh.py (working copy)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>59</th><th>59</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 'volume': 1.</span> </td>
                  </tr><tr>
                          <th>60</th><th>60</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; }</span> </td>
                  </tr><tr>
                          <th>61</th><th>61</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; </span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>62</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; #store if mesh is periodic, and if so the IDs as non periodic mesh</ins> </td>
                  </tr><tr>
                          <th> </th><th>63</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; self.periodicBC = False</ins> </td>
                  </tr><tr>
                          <th> </th><th>64</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; self.nonPeriodicCellVertexIDs = None</ins> </td>
                  </tr><tr>
                          <th> </th><th>65</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; self.nonPeriodicOrderedCellVertexIDs = None</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>66</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>62</th><th>67</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._calcTopology()</span> </td>
                  </tr><tr>
                          <th>63</th><th>68</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._calcGeometry()</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>64</th><th> </th><td class="l"><span>&nbsp; &nbsp; </span> </td>
                      </tr>
                      <tr>
                        <th> </th><th>69</th><td class="r"><span></span> </td>
                      </tr><tr>
                        <th> </th><th>70</th><td class="r"><span>&nbsp; &nbsp; def __sub__(self, other):</span> </td>
                      </tr><tr>
                        <th> </th><th>71</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; """</span> </td>
                      </tr><tr>
                        <th> </th><th>72</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; raise a helpfull type error</span> </td>
                      </tr><tr>
                        <th> </th><th>73</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; """</span> </td>
                      </tr><tr>
                        <th> </th><th>74</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; raise TypeError, "'-' is unsupported for meshes, use '+'"</span> </td>
                      </tr><tr>
                        <th> </th><th>75</th><td class="r"><span></span> </td>
                      </tr><tr>
                        <th> </th><th>76</th><td class="r"><span>&nbsp; &nbsp; def __div__(self, other):</span> </td>
                      </tr><tr>
                        <th> </th><th>77</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; """</span> </td>
                      </tr><tr>
                        <th> </th><th>78</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; raise a helpfull type error</span> </td>
                      </tr><tr>
                        <th> </th><th>79</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; """</span> </td>
                      </tr><tr>
                        <th> </th><th>80</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; raise TypeError, "'/' is unsupported for meshes, use '*'"</span> </td>
                      </tr><tr class="last">
                        <th> </th><th>81</th><td class="r"><span></span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>65</th><th>82</th><td class="l"><span>&nbsp; &nbsp; def __add__(self, other):</span> </td>
                  </tr><tr>
                          <th>66</th><th>83</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; """</span> </td>
                  </tr><tr>
                          <th>67</th><th>84</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; Either translate a `Mesh` or concatenate two `Mesh` objects.</span> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>meshes/numMesh/periodicGrid2D.py</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File meshes/numMesh/periodicGrid2D.py (revision 3646)">
                  </th>
                  <th title="File meshes/numMesh/periodicGrid2D.py (working copy)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>96</th><th>96</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[1, 2, 4, 5],</span> </td>
                  </tr><tr>
                          <th>97</th><th>97</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[0, 1, 3, 4]]))</span> </td>
                  </tr><tr>
                          <th>98</th><th>98</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; True</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>99</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>100</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &gt;&gt;&gt; def testadd():</ins> </td>
                  </tr><tr>
                          <th> </th><th>101</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp;try:</ins> </td>
                  </tr><tr>
                          <th> </th><th>102</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;meshnew = mesh + [[1.], [0]]</ins> </td>
                  </tr><tr>
                          <th> </th><th>103</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return False</ins> </td>
                  </tr><tr>
                          <th> </th><th>104</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp;except TypeError:</ins> </td>
                  </tr><tr>
                          <th> </th><th>105</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return True</ins> </td>
                  </tr><tr>
                          <th> </th><th>106</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &gt;&gt;&gt; testadd()</ins> </td>
                  </tr><tr>
                          <th> </th><th>107</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; True</ins> </td>
                  </tr><tr>
                          <th> </th><th>108</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>109</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &gt;&gt;&gt; def testmult():</ins> </td>
                  </tr><tr>
                          <th> </th><th>110</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp;try:</ins> </td>
                  </tr><tr>
                          <th> </th><th>111</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;meshnew = mesh * 2.</ins> </td>
                  </tr><tr>
                          <th> </th><th>112</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return False</ins> </td>
                  </tr><tr>
                          <th> </th><th>113</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp;except TypeError:</ins> </td>
                  </tr><tr>
                          <th> </th><th>114</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return True</ins> </td>
                  </tr><tr>
                          <th> </th><th>115</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &gt;&gt;&gt; testmult()</ins> </td>
                  </tr><tr>
                          <th> </th><th>116</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; True</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>117</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>99</th><th>118</th><td class="l"><span>&nbsp; &nbsp; """</span> </td>
                  </tr><tr>
                          <th>100</th><th>119</th><td class="l"><span>&nbsp; &nbsp; def __init__(self, dx = 1., dy = 1., nx = None, ny = None):</span> </td>
                  </tr><tr>
                          <th>101</th><th>120</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; Grid2D.__init__(self, dx = dx, dy = dy, nx = nx, ny = ny)</span> </td>
                  </tr><tr>
                          <th>102</th><th>121</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self.nonPeriodicCellVertexIDs = Grid2D._getCellVertexIDs(self)</span> </td>
                  </tr><tr>
                          <th>103</th><th>122</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self.nonPeriodicOrderedCellVertexIDs = Grid2D._getOrderedCellVertexIDs(self)</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>104</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; from fipy.tools import numerix</span> </td>
                      </tr><tr>
                        <th>105</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._connectFaces(numerix.nonzero(self.getFacesLeft()), </span> </td>
                      </tr><tr>
                        <th>106</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;numerix.nonzero(self.getFacesRight()))</span> </td>
                      </tr><tr>
                        <th>107</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._connectFaces(numerix.nonzero(self.getFacesBottom()), </span> </td>
                      </tr><tr>
                        <th>108</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;numerix.nonzero(self.getFacesTop()))</span> </td>
                      </tr>
                      <tr>
                        <th> </th><th>123</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._makeperiodic()</span> </td>
                      </tr><tr>
                        <th> </th><th>124</th><td class="r"><span>&nbsp; &nbsp; </span> </td>
                      </tr><tr>
                        <th> </th><th>125</th><td class="r"><span>&nbsp; &nbsp; def _makeperiodic(self):</span> </td>
                      </tr><tr>
                        <th> </th><th>126</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._connectFaces(self.getFacesLeft(), </span> </td>
                      </tr><tr>
                        <th> </th><th>127</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;self.getFacesRight())</span> </td>
                      </tr><tr>
                        <th> </th><th>128</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._connectFaces(self.getFacesBottom(), </span> </td>
                      </tr><tr class="last">
                        <th> </th><th>129</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;self.getFacesTop())</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>109</th><th>130</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="rem">
                  <tr class="first">
                          <th>110</th><th> </th><td class="l"><del>&nbsp; &nbsp; def _getCellVertexIDs(self):</del> </td>
                  </tr><tr>
                          <th>111</th><th> </th><td class="l"><del>&nbsp; &nbsp; &nbsp; &nbsp; return self.nonPeriodicCellVertexIDs</del> </td>
                  </tr><tr>
                          <th>112</th><th> </th><td class="l"><del></del> </td>
                  </tr><tr>
                          <th>113</th><th> </th><td class="l"><del>&nbsp; &nbsp; def _getOrderedCellVertexIDs(self):</del> </td>
                  </tr><tr>
                          <th>114</th><th> </th><td class="l"><del>&nbsp; &nbsp; &nbsp; &nbsp; return self.nonPeriodicOrderedCellVertexIDs</del> </td>
                  </tr><tr class="last">
                          <th>115</th><th> </th><td class="l"><del>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</del> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>116</th><th>131</th><td class="l"><span>class PeriodicGrid2DLeftRight(PeriodicGrid2D):</span> </td>
                  </tr><tr>
                          <th>117</th><th>132</th><td class="l"><span>&nbsp; &nbsp; def __init__(self, dx = 1., dy = 1., nx = None, ny = None):</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>118</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; <del></del>Grid2D.__init__(self, dx = dx, dy = dy, nx = nx, ny = ny)</span> </td>
                      </tr><tr>
                        <th>119</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self.nonPeriodicCellVertexIDs = Grid2D._getCellVertexIDs(self)</span> </td>
                      </tr><tr>
                        <th>120</th><th> </th><td class="l"><span>&nbsp; &nbsp; <del>&nbsp; &nbsp; self.nonPeriodicOrderedCellVertexIDs = Grid2D._getOrderedCellVertexIDs(self)</del></span> </td>
                      </tr>
                      <tr>
                        <th> </th><th>133</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; <ins>Periodic</ins>Grid2D.__init__(self, dx = dx, dy = dy, nx = nx, ny = ny)</span> </td>
                      </tr><tr>
                        <th> </th><th>134</th><td class="r"><span></span> </td>
                      </tr><tr class="last">
                        <th> </th><th>135</th><td class="r"><span>&nbsp; &nbsp; <ins>def _makeperiodic(self):</ins></span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>121</th><th>136</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; from fipy.tools import numerix</span> </td>
                  </tr><tr>
                          <th>122</th><th>137</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._connectFaces(numerix.nonzero(self.getFacesLeft()), </span> </td>
                  </tr><tr>
                          <th>123</th><th>138</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;numerix.nonzero(self.getFacesRight()))</span> </td>
                  </tr><tr>
                          <th>124</th><th>139</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>125</th><th>140</th><td class="l"><span>class PeriodicGrid2DTopBottom(PeriodicGrid2D):</span> </td>
                  </tr><tr>
                          <th>126</th><th>141</th><td class="l"><span>&nbsp; &nbsp; def __init__(self, dx = 1., dy = 1., nx = None, ny = None):</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>127</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; <del></del>Grid2D.__init__(self, dx = dx, dy = dy, nx = nx, ny = ny)</span> </td>
                      </tr><tr>
                        <th>128</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self.nonPeriodicCellVertexIDs = Grid2D._getCellVertexIDs(self)</span> </td>
                      </tr><tr>
                        <th>129</th><th> </th><td class="l"><span>&nbsp; &nbsp; <del>&nbsp; &nbsp; self.nonPeriodicOrderedCellVertexIDs = Grid2D._getOrderedCellVertexIDs(self)</del></span> </td>
                      </tr>
                      <tr>
                        <th> </th><th>142</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; <ins>Periodic</ins>Grid2D.__init__(self, dx = dx, dy = dy, nx = nx, ny = ny)</span> </td>
                      </tr><tr>
                        <th> </th><th>143</th><td class="r"><span></span> </td>
                      </tr><tr class="last">
                        <th> </th><th>144</th><td class="r"><span>&nbsp; &nbsp; <ins>def _makeperiodic(self):</ins></span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>130</th><th>145</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; from fipy.tools import numerix</span> </td>
                  </tr><tr>
                          <th>131</th><th>146</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._connectFaces(numerix.nonzero(self.getFacesBottom()), </span> </td>
                  </tr><tr>
                          <th>132</th><th>147</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;numerix.nonzero(self.getFacesTop()))</span> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>meshes/numMesh/mesh.py</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File meshes/numMesh/mesh.py (revision 3646)">
                  </th>
                  <th title="File meshes/numMesh/mesh.py (working copy)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>71</th><th>71</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>72</th><th>72</th><td class="l"><span>&nbsp; &nbsp; def __add__(self, other):</span> </td>
                  </tr><tr>
                          <th>73</th><th>73</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if(isinstance(other, Mesh)):</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>74</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if self.periodicBC or other.periodicBC:</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>75</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise TypeError, 'Periodic meshes cannot be added'</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>74</th><th>76</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self._concatenate(other, smallNumber = 1e-15)</span> </td>
                  </tr><tr>
                          <th>75</th><th>77</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; else:</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>78</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if self.periodicBC:</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>79</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise TypeError, 'Periodic meshes cannot be added to'</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>76</th><th>80</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self._translate(other)</span> </td>
                  </tr><tr>
                          <th>77</th><th>81</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>78</th><th>82</th><td class="l"><span>&nbsp; &nbsp; __radd__ = __add__</span> </td>
                  </tr><tr>
                          <th>79</th><th>83</th><td class="l"><span>&nbsp; &nbsp; </span> </td>
                  </tr><tr>
                          <th>80</th><th>84</th><td class="l"><span>&nbsp; &nbsp; def __mul__(self, factor):</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>85</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if self.periodicBC:</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>86</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise TypeError, 'Periodic meshes cannot be scaled'</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>81</th><th>87</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; newCoords = self.vertexCoords * factor</span> </td>
                  </tr><tr>
                          <th>82</th><th>88</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; newmesh = Mesh(vertexCoords=newCoords, </span> </td>
                  </tr><tr>
                          <th>83</th><th>89</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;faceVertexIDs=numerix.array(self.faceVertexIDs), </span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L155">…</a></th>
                  <th><a href="#L161">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>155</th><th>161</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; numerix.put(self.cellDistances, faces0, MA.take(faceToCellDistances0 + faceToCellDistances1, faces0))</span> </td>
                  </tr><tr>
                          <th>156</th><th>162</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>157</th><th>163</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ## change the direction of the face normals for faces0</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="last first">
                          <th> </th><th>164</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>158</th><th>165</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; for dim in range(self.getDim()):</span> </td>
                  </tr><tr>
                          <th>159</th><th>166</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; faceNormals = self.faceNormals[dim].copy()</span> </td>
                  </tr><tr>
                          <th>160</th><th>167</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; numerix.put(faceNormals, faces0, MA.take(faceNormals, faces1))</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L180">…</a></th>
                  <th><a href="#L187">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>180</th><th>187</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; _CommonMesh._calcTopology(self)</span> </td>
                  </tr><tr>
                          <th>181</th><th>188</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>182</th><th>189</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ## calculate new geometry</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="last first">
                          <th> </th><th>190</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; self._calcFaceCellToCellNormals()</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>183</th><th>191</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._calcFaceToCellDistanceRatio()</span> </td>
                  </tr><tr>
                          <th>184</th><th>192</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._calcCellToCellDistances()</span> </td>
                  </tr><tr>
                          <th>185</th><th>193</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._calcScaledGeometry()</span> </td>
                  </tr><tr>
                          <th>186</th><th>194</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self._calcFaceAspectRatios()</span> </td>
                  </tr><tr>
                          <th>187</th><th>195</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; </span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>196</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ## set flag, mesh changes not allowed anymore</ins> </td>
                  </tr><tr>
                          <th> </th><th>197</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; self.periodicBC = True</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>198</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>188</th><th>199</th><td class="l"><span>&nbsp; &nbsp; def _getConcatenableMesh(self):</span> </td>
                  </tr><tr>
                          <th>189</th><th>200</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; return self</span> </td>
                  </tr><tr>
                          <th>190</th><th>201</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; </span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L490">…</a></th>
                  <th><a href="#L501">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>490</th><th>501</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>491</th><th>502</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self.faceCenters = MA.filled(MA.average(faceVertexCoords, axis=1))</span> </td>
                  </tr><tr>
                          <th>492</th><th>503</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="rem">
                  <tr class="first">
                          <th>493</th><th> </th><td class="l"><del>&nbsp; &nbsp; &nbsp; &nbsp; </del> </td>
                  </tr><tr class="last">
                          <th>494</th><th> </th><td class="l"><del></del> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>495</th><th>504</th><td class="l"><span>&nbsp; &nbsp; def _calcFaceNormals(self):</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>505</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ## test if not periodic. Periodic mesh inverts normals on connected faces,</ins> </td>
                  </tr><tr>
                          <th> </th><th>506</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ## this may not be undone by a recalculation.</ins> </td>
                  </tr><tr>
                          <th> </th><th>507</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if self.periodicBC:</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>508</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise TypeError, 'Periodic meshes do not allow recalculation of face normals'</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>496</th><th>509</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; faceVertexIDs = MA.filled(self.faceVertexIDs, 0)</span> </td>
                  </tr><tr>
                          <th>497</th><th>510</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; faceVertexCoords = numerix.take(self.vertexCoords, faceVertexIDs, axis=1)</span> </td>
                  </tr><tr>
                          <th>498</th><th>511</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; t1 = faceVertexCoords[:,1,:] - faceVertexCoords[:,0,:]</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L590">…</a></th>
                  <th><a href="#L603">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>590</th><th>603</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; return self.faceCenters</span> </td>
                  </tr><tr>
                          <th>591</th><th>604</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>592</th><th>605</th><td class="l"><span>&nbsp; &nbsp; def _getOrderedCellVertexIDs(self):</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>606</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if self.nonPeriodicOrderedCellVertexIDs is not None:</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>607</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.nonPeriodicOrderedCellVertexIDs</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>593</th><th>608</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; return self._getCellVertexIDs()</span> </td>
                  </tr><tr>
                          <th>594</th><th>609</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>595</th><th>610</th><td class="l"><span>&nbsp; &nbsp; def _getCellDistanceNormals(self):</span> </td>
                  </tr><tr>
                          <th>596</th><th>611</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; return self.getCellDistanceVectors() / self.getCellDistances()</span> </td>
                  </tr><tr>
                          <th>597</th><th>612</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; </span> </td>
                  </tr><tr>
                          <th>598</th><th>613</th><td class="l"><span>&nbsp; &nbsp; def _getCellVertexIDs(self):</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>599</th><th> </th><td class="l"><span></span> </td>
                      </tr>
                      <tr>
                        <th> </th><th>614</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; if self.nonPeriodicCellVertexIDs is not None:</span> </td>
                      </tr><tr class="last">
                        <th> </th><th>615</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.nonPeriodicCellVertexIDs</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>600</th><th>616</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ## Get all the vertices from all the faces for each cell</span> </td>
                  </tr><tr>
                          <th>601</th><th>617</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; cellFaceVertices = numerix.take(self.faceVertexIDs, self.cellFaceIDs, axis=1)</span> </td>
                  </tr><tr>
                          <th>602</th><th>618</th><td class="l"><span></span> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>meshes/numMesh/uniformGrid2D.py</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File meshes/numMesh/uniformGrid2D.py (revision 3646)">
                  </th>
                  <th title="File meshes/numMesh/uniformGrid2D.py (working copy)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>112</th><th>112</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 'volume': 1.</span> </td>
                  </tr><tr>
                          <th>113</th><th>113</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; }</span> </td>
                  </tr><tr>
                          <th>114</th><th>114</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>115</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; self.periodicBC = False</ins> </td>
                  </tr><tr>
                          <th> </th><th>116</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; self.nonPeriodicCellVertexIDs = None</ins> </td>
                  </tr><tr>
                          <th> </th><th>117</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; self.nonPeriodicOrderedCellVertexIDs = None</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>118</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>115</th><th>119</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self.setScale(value = scale)</span> </td>
                  </tr><tr>
                          <th>116</th><th>120</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; </span> </td>
                  </tr><tr>
                          <th>117</th><th>121</th><td class="l"><span>&nbsp; &nbsp; def _translate(self, vector):</span> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>meshes/numMesh/mesh2D.py</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File meshes/numMesh/mesh2D.py (revision 3646)">
                  </th>
                  <th title="File meshes/numMesh/mesh2D.py (working copy)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>66</th><th>66</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self.faceAreas = numerix.sqrtDot(tangent, tangent)</span> </td>
                  </tr><tr>
                          <th>67</th><th>67</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>68</th><th>68</th><td class="l"><span>&nbsp; &nbsp; def _calcFaceNormals(self):</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>69</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ## test if not periodic. Periodic mesh inverts normals on connected faces,</ins> </td>
                  </tr><tr>
                          <th> </th><th>70</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; ## this may not be undone by a recalculation.</ins> </td>
                  </tr><tr>
                          <th> </th><th>71</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if self.periodicBC:</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>72</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise TypeError, 'Periodic meshes do not allow recalculation of face normals'</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>69</th><th>73</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; faceVertexCoords = numerix.take(self.vertexCoords, self.faceVertexIDs, axis=1)</span> </td>
                  </tr><tr>
                          <th>70</th><th>74</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; t1 = faceVertexCoords[:,1,:] - faceVertexCoords[:,0,:]</span> </td>
                  </tr><tr>
                          <th>71</th><th>75</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; self.faceNormals = t1.copy()</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L96">…</a></th>
                  <th><a href="#L100">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>96</th><th>100</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; return newmesh</span> </td>
                  </tr><tr>
                          <th>97</th><th>101</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>98</th><th>102</th><td class="l"><span>&nbsp; &nbsp; def __mul__(self, factor):</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>103</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if self.periodicBC:</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>104</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise TypeError, 'Periodic meshes cannot be scaled'</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>99</th><th>105</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; newCoords = self.vertexCoords * factor</span> </td>
                  </tr><tr>
                          <th>100</th><th>106</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; newmesh = Mesh2D(newCoords, self.faceVertexIDs, self.cellFaceIDs)</span> </td>
                  </tr><tr>
                          <th>101</th><th>107</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; return newmesh</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L103">…</a></th>
                  <th><a href="#L109">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>103</th><th>109</th><td class="l"><span>&nbsp; &nbsp; def _concatenate(self, other, smallNumber):</span> </td>
                  </tr><tr>
                          <th>104</th><th>110</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; return Mesh2D(**self._getAddedMeshValues(other._getConcatenableMesh(), smallNumber))</span> </td>
                  </tr><tr>
                          <th>105</th><th>111</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>112</th><td class="r"><ins>&nbsp; &nbsp; def _connectFaces(self, faces1=None, faces2=None):</ins> </td>
                  </tr><tr>
                          <th> </th><th>113</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; """</ins> </td>
                  </tr><tr>
                          <th> </th><th>114</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; Merge faces on the same mesh. This is used to create periodic</ins> </td>
                  </tr><tr>
                          <th> </th><th>115</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; meshes. The first list of faces, `faces1`, will be identified with </ins> </td>
                  </tr><tr>
                          <th> </th><th>116</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; the `faces2` faces. </ins> </td>
                  </tr><tr>
                          <th> </th><th>117</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; They aren't deleted but their</ins> </td>
                  </tr><tr>
                          <th> </th><th>118</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; adjacent cells are made to point at `faces1`. The list</ins> </td>
                  </tr><tr>
                          <th> </th><th>119</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; `faces2` are not altered, they still remain as members of</ins> </td>
                  </tr><tr>
                          <th> </th><th>120</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; exterior faces.</ins> </td>
                  </tr><tr>
                          <th> </th><th>121</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>122</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; If faces1==None, then the left faces are used by default</ins> </td>
                  </tr><tr>
                          <th> </th><th>123</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; If faces2==None, then the right faces are used by default</ins> </td>
                  </tr><tr>
                          <th> </th><th>124</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>125</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; Warning: this method cannot be called for UniformGrid2D meshes.</ins> </td>
                  </tr><tr>
                          <th> </th><th>126</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; """</ins> </td>
                  </tr><tr>
                          <th> </th><th>127</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; self.nonPeriodicCellVertexIDs = self._getCellVertexIDs().copy()</ins> </td>
                  </tr><tr>
                          <th> </th><th>128</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; self.nonPeriodicOrderedCellVertexIDs = self._getOrderedCellVertexIDs().copy()</ins> </td>
                  </tr><tr>
                          <th> </th><th>129</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; from fipy.tools import numerix</ins> </td>
                  </tr><tr>
                          <th> </th><th>130</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if faces1 is not None:</ins> </td>
                  </tr><tr>
                          <th> </th><th>131</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lf = faces1</ins> </td>
                  </tr><tr>
                          <th> </th><th>132</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; else:</ins> </td>
                  </tr><tr>
                          <th> </th><th>133</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lf = self.getFacesLeft()</ins> </td>
                  </tr><tr>
                          <th> </th><th>134</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if faces2 is not None:</ins> </td>
                  </tr><tr>
                          <th> </th><th>135</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rf = faces2</ins> </td>
                  </tr><tr>
                          <th> </th><th>136</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; else:</ins> </td>
                  </tr><tr>
                          <th> </th><th>137</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rf = self.getFacesRight()</ins> </td>
                  </tr><tr>
                          <th> </th><th>138</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; Mesh._connectFaces(self, numerix.nonzero(lf), </ins> </td>
                  </tr><tr>
                          <th> </th><th>139</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;numerix.nonzero(rf))</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>140</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>106</th><th>141</th><td class="l"><span>&nbsp; &nbsp; def _getOrderedCellVertexIDs(self):</span> </td>
                  </tr><tr>
                          <th>107</th><th>142</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; from fipy.tools.numerix import take</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>143</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; if self.nonPeriodicOrderedCellVertexIDs is not None:</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>144</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.nonPeriodicOrderedCellVertexIDs</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>108</th><th>145</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; NFac = self._getMaxFacesPerCell()</span> </td>
                  </tr><tr>
                          <th>109</th><th>146</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>110</th><th>147</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # numpy 1.1's MA.take doesn't like FlatIter. Call ravel() instead.</span> </td>
                  </tr>
            </tbody>
        </table>
      </li>
  </ul>
</div>

        </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/fipy/raw-attachment/ticket/298/fullperiodic2d.patch">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en">
            <div id="projfooter"><!-- Project specific footer start -->
                <script type="text/javascript"> if (window.runOnloadHook) runOnloadHook();</script>
                <script type="text/javascript">
                    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
                    document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
                </script>
                <script type="text/javascript">
                    var pageTracker = _gat._getTracker("UA-2981268-9");
                    pageTracker._initData();
                    pageTracker._trackPageview();
                </script>
            </div><!-- Project specific footer end -->
            <div id="footer_banner">
                <img src="/trac_1.0_htdocs//footer.gif" width="840" height="45" border="0" usemap="#footer" />
                <map name="footer" id="footer">
                    <area shape="rect" coords="2,3,133,42" href="http://www.kent.edu" target="_blank" alt="Kent State University" />
                    <area shape="rect" coords="137,3,240,41" href="http://www.nist.gov" target="_blank" alt="NIST" />
                    <area shape="rect" coords="244,3,372,39" href="http://www.mit.edu" target="_blank" alt="MIT" />
                    <area shape="rect" coords="376,5,606,41" href="http://www.umich.edu" target="_blank" alt="University of Michigan" />
                    <area shape="rect" coords="613,5,715,38" href="http://www.purdue.edu" target="_blank" alt="Purdue" />
                    <area shape="rect" coords="718,4,833,41" href="http://www.iastate.edu" target="_blank" alt="Iowa State University" />
                </map>
            </div>
            <br />
            <div id="altlinks">
                <br />
                <ul>
                    <li><a href="http://matdl.org/repository/about.htm" class="last first"> About </a></li>
                    <li><a href="http://matdl.org/repository/tou.htm" class="last first"> Terms of Use </a></li>
                    <li><a href="http://matdl.org/repository/contact.htm" class="last first"> Contact </a></li>
                    <li><a href="http://matdl.org/repository/priv.htm" class="last first"> Privacy Policy </a></li>
                </ul>
            </div>
	    <div id="tracfooter" lang="en" xml:lang="en">
	    <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/fipy/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
	    <p class="left">
	    Powered by <a href="/fipy/about"><strong>Trac 1.0</strong></a><br />
	    By <a href="http://www.edgewall.org/">Edgewall Software</a>.
	    </p>
	    <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
	    </div>
        </div>
    </body>
</html>