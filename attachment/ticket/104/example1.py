<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  
    



    <head>
    <title>
      example1.py on Ticket #104 – Attachment
     – FiPy
    </title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/fipy/search" />
        <link rel="help" href="/fipy/wiki/TracGuide" />
        <link rel="alternate" href="/fipy/raw-attachment/ticket/104/example1.py" type="application/x-python; charset=iso-8859-15" title="Original Format" />
        <link rel="up" href="/fipy/ticket/104" title="Ticket #104" />
        <link rel="start" href="/fipy/wiki" />
        <link rel="stylesheet" href="/trac_1.0_htdocs/css/trac.css" type="text/css" /><link rel="stylesheet" href="/fipy/pygments/trac.css" type="text/css" /><link rel="stylesheet" href="/trac_1.0_htdocs/css/code.css" type="text/css" />
        <link rel="shortcut icon" href="/fipy/chrome/common/trac.ico" type="image/x-icon" />
        <link rel="icon" href="/fipy/chrome/common/trac.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/fipy/search/opensearch" title="Search FiPy" />
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/jquery.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/babel.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/trac.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/search.js"></script>
      <script type="text/javascript" src="/trac_1.0_htdocs/js/folding.js"></script>
      <script type="text/javascript">
        jQuery(document).ready(function($) {
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
        });
      </script>
        <link rel="stylesheet" type="text/css" href="/trac_1.0_htdocs//css/matdlosi.css" />
	<style type="text/css">
	body {width: 95%;}
	</style>
    </head>
    <body>
    <div id="banner">
      <div id="header">
            <div id="topLogo">
                <img src="/trac_1.0_htdocs//hdr_main.jpg" alt="Main Header" usemap="#MatDL_Banner_Narrow_Map" />
                <map name="MatDL_Banner_Narrow_Map">
                    <area shape="rect" alt="Materials Digital Library" coords="44,53,263,70" href="http://matdl.org" />
                    <area shape="rect" alt="NSDL logo" coords="675,43,740,71" href="http://nsdl.org" />
                    <area shape="rect" alt="NSF logo" coords="686,0,731,43" href="http://nsf.gov" />
                    <area shape="rect" alt="MatDL logo" coords="44,0,158,53" href="http://matdl.org" />
                </map>
                <br />
                <br />
            </div>
            <div id="projheader">
                <h1 style="margin: 0px;">
                    <img style="width: 50px;" src="/fipy/chrome/site/fipy-logo.png" alt="FiPy" />
                FiPy: A Finite Volume PDE Solver Using Python</h1>
                <a href="http://www.ctcms.nist.gov/fipy">FiPy Home</a>
            </div>
        </div>
      <form id="search" action="/fipy/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/fipy/login">Login</a></li><li><a href="/fipy/wiki/TracGuide">Help/Guide</a></li><li><a href="/fipy/about">About Trac</a></li><li><a href="http://matforge.org">Matforge Home</a></li><li><a href="/fipy/register">Register</a></li><li><a href="http://matforge.org/participate.html">Participate</a></li><li class="last"><a href="/fipy/prefs">Preferences</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/fipy/wiki">Wiki</a></li><li><a href="/fipy/blog">Blog</a></li><li><a href="/fipy/timeline">Timeline</a></li><li><a href="/fipy/roadmap">Roadmap</a></li><li><a href="/fipy/browser">Browse Source</a></li><li><a href="/fipy/report">View Tickets</a></li><li><a href="http://build.cmi.kent.edu:8010/waterfall">Buildbot</a></li><li class="last"><a href="http://build.cmi.kent.edu/codespeed">Codespeed</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
        <ul>
          <li class="last first"><a href="/fipy/ticket/104">Back to Ticket #104</a></li>
        </ul>
        <hr />
      </div>
    <div id="content" class="attachment">
        <h1><a href="/fipy/ticket/104">Ticket #104</a>: example1.py</h1>
        <table id="info" summary="Description">
          <tbody>
            <tr>
              <th scope="col">File example1.py,
                <span title="19607 bytes">19.1 KB</span>
                (added by wd15, <a class="timeline" href="/fipy/timeline?from=2006-11-14T09%3A50%3A04-05%3A00&amp;precision=second" title="See timeline at 11/14/06 09:50:04">8 years ago</a>)</th>
            </tr>
            <tr>
              <td class="message searchable">
                
              </td>
            </tr>
          </tbody>
        </table>
        <div id="preview" class="searchable">
          
  <table class="code"><thead><tr><th class="lineno" title="Line numbers">Line</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td><span class="c">#!/usr/bin/env python</span></td></tr><tr><th id="L2"><a href="#L2">2</a></th><td></td></tr><tr><th id="L3"><a href="#L3">3</a></th><td><span class="sd">r"""</span></td></tr><tr><th id="L4"><a href="#L4">4</a></th><td><span class="sd"></span></td></tr><tr><th id="L5"><a href="#L5">5</a></th><td><span class="sd">This section will present an example of using Fipy to model the</span></td></tr><tr><th id="L6"><a href="#L6">6</a></th><td><span class="sd">superfill process. The example will be fairly simple and use unly one</span></td></tr><tr><th id="L7"><a href="#L7">7</a></th><td><span class="sd">additive preadsorbed onto the interface. All the code for the problem</span></td></tr><tr><th id="L8"><a href="#L8">8</a></th><td><span class="sd">will be included in this example. The example demonstrates how to</span></td></tr><tr><th id="L9"><a href="#L9">9</a></th><td><span class="sd">build the mesh, create the required variables, set up a level set</span></td></tr><tr><th id="L10"><a href="#L10">10</a></th><td><span class="sd">equation and view the results.</span></td></tr><tr><th id="L11"><a href="#L11">11</a></th><td><span class="sd">The following notation:</span></td></tr><tr><th id="L12"><a href="#L12">12</a></th><td><span class="sd"></span></td></tr><tr><th id="L13"><a href="#L13">13</a></th><td><span class="sd">    &gt;&gt;&gt; print 'something'</span></td></tr><tr><th id="L14"><a href="#L14">14</a></th><td><span class="sd">    something</span></td></tr><tr><th id="L15"><a href="#L15">15</a></th><td><span class="sd"></span></td></tr><tr><th id="L16"><a href="#L16">16</a></th><td><span class="sd">indicates a python command prompt. This script can be run uisng python</span></td></tr><tr><th id="L17"><a href="#L17">17</a></th><td><span class="sd">and FiPy. To check that you have python, type trh following at the</span></td></tr><tr><th id="L18"><a href="#L18">18</a></th><td><span class="sd">command prompt:</span></td></tr><tr><th id="L19"><a href="#L19">19</a></th><td><span class="sd"></span></td></tr><tr><th id="L20"><a href="#L20">20</a></th><td><span class="sd">   $ python</span></td></tr><tr><th id="L21"><a href="#L21">21</a></th><td><span class="sd">   Python 2.4.3 (#1, Oct  4 2006, 18:56:48) </span></td></tr><tr><th id="L22"><a href="#L22">22</a></th><td><span class="sd">   [GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin</span></td></tr><tr><th id="L23"><a href="#L23">23</a></th><td><span class="sd">   Type "help", "copyright", "credits" or "license" for more information.</span></td></tr><tr><th id="L24"><a href="#L24">24</a></th><td><span class="sd">   &gt;&gt;&gt; </span></td></tr><tr><th id="L25"><a href="#L25">25</a></th><td><span class="sd"></span></td></tr><tr><th id="L26"><a href="#L26">26</a></th><td><span class="sd">or something like this, The "&gt;&gt;&gt;" notation indicates a python command</span></td></tr><tr><th id="L27"><a href="#L27">27</a></th><td><span class="sd">prompt. You can type python commands at teh command prompt,</span></td></tr><tr><th id="L28"><a href="#L28">28</a></th><td><span class="sd"></span></td></tr><tr><th id="L29"><a href="#L29">29</a></th><td><span class="sd">    &gt;&gt;&gt; print 'something'</span></td></tr><tr><th id="L30"><a href="#L30">30</a></th><td><span class="sd">    something</span></td></tr><tr><th id="L31"><a href="#L31">31</a></th><td><span class="sd"></span></td></tr><tr><th id="L32"><a href="#L32">32</a></th><td><span class="sd">where the line after ''&gt;&gt;&gt;'' is the expected output. Also, version 1.1</span></td></tr><tr><th id="L33"><a href="#L33">33</a></th><td><span class="sd">of FiPy or better will be required to run this problem. To check that</span></td></tr><tr><th id="L34"><a href="#L34">34</a></th><td><span class="sd">FiPy is installed type</span></td></tr><tr><th id="L35"><a href="#L35">35</a></th><td><span class="sd"></span></td></tr><tr><th id="L36"><a href="#L36">36</a></th><td><span class="sd">    &gt;&gt;&gt; from fipy import *</span></td></tr><tr><th id="L37"><a href="#L37">37</a></th><td><span class="sd">    &gt;&gt;&gt; print __version__ </span></td></tr><tr><th id="L38"><a href="#L38">38</a></th><td><span class="sd">    1.1</span></td></tr><tr><th id="L39"><a href="#L39">39</a></th><td><span class="sd"></span></td></tr><tr><th id="L40"><a href="#L40">40</a></th><td><span class="sd">First, the geometry for the problem for the problem needs to be created</span></td></tr><tr><th id="L41"><a href="#L41">41</a></th><td><span class="sd">We can choose our paramters values as follows,</span></td></tr><tr><th id="L42"><a href="#L42">42</a></th><td><span class="sd"></span></td></tr><tr><th id="L43"><a href="#L43">43</a></th><td><span class="sd">    &gt;&gt;&gt; PF = PhysicalField</span></td></tr><tr><th id="L44"><a href="#L44">44</a></th><td><span class="sd">    &gt;&gt;&gt; trenchDepth = PF("1.0mu")</span></td></tr><tr><th id="L45"><a href="#L45">45</a></th><td><span class="sd"></span></td></tr><tr><th id="L46"><a href="#L46">46</a></th><td><span class="sd">Here we have set a parameter ''ternchDepth'', set its value to 1 and</span></td></tr><tr><th id="L47"><a href="#L47">47</a></th><td><span class="sd">given it units of $\mu$m. We will define more if these units,</span></td></tr><tr><th id="L48"><a href="#L48">48</a></th><td><span class="sd"></span></td></tr><tr><th id="L49"><a href="#L49">49</a></th><td><span class="sd">    &gt;&gt;&gt; trenchWidth = PF("0.5mu")</span></td></tr><tr><th id="L50"><a href="#L50">50</a></th><td><span class="sd">    &gt;&gt;&gt; trenchSpacing = PF("1.0mu")</span></td></tr><tr><th id="L51"><a href="#L51">51</a></th><td><span class="sd">    &gt;&gt;&gt; boundaryLayerDepth = PF("1.0mu")</span></td></tr><tr><th id="L52"><a href="#L52">52</a></th><td><span class="sd">    &gt;&gt;&gt; spaceBelowTrench = 0.1 * trenchDepth</span></td></tr><tr><th id="L53"><a href="#L53">53</a></th><td><span class="sd">    </span></td></tr><tr><th id="L54"><a href="#L54">54</a></th><td><span class="sd">A reduced boundary layer depth is used here to simplify the mesh.  The</span></td></tr><tr><th id="L55"><a href="#L55">55</a></th><td><span class="sd">parameters above can be used to create a mesh of the required size.</span></td></tr><tr><th id="L56"><a href="#L56">56</a></th><td><span class="sd"></span></td></tr><tr><th id="L57"><a href="#L57">57</a></th><td><span class="sd">    &gt;&gt;&gt; delta = trenchWidth / 50</span></td></tr><tr><th id="L58"><a href="#L58">58</a></th><td><span class="sd">    &gt;&gt;&gt; nx = (spaceBelowTrench + trenchDepth + boundaryLayerDepth) / delta</span></td></tr><tr><th id="L59"><a href="#L59">59</a></th><td><span class="sd">    &gt;&gt;&gt; ny = trenchSpacing / delta</span></td></tr><tr><th id="L60"><a href="#L60">60</a></th><td><span class="sd">    &gt;&gt;&gt; mesh = Grid2D(dx=delta, dy=delta, nx=nx, ny=ny)</span></td></tr><tr><th id="L61"><a href="#L61">61</a></th><td><span class="sd"></span></td></tr><tr><th id="L62"><a href="#L62">62</a></th><td><span class="sd">Create the distance variable,</span></td></tr><tr><th id="L63"><a href="#L63">63</a></th><td><span class="sd"></span></td></tr><tr><th id="L64"><a href="#L64">64</a></th><td><span class="sd">    &gt;&gt;&gt; narrowBandWidth = numberOfCellsInNarrowBand * cellSize</span></td></tr><tr><th id="L65"><a href="#L65">65</a></th><td><span class="sd">    &gt;&gt;&gt; phi = DistanceVariable(mesh=mesh,</span></td></tr><tr><th id="L66"><a href="#L66">66</a></th><td><span class="sd">    ...                        value=-1,</span></td></tr><tr><th id="L67"><a href="#L67">67</a></th><td><span class="sd">    ...                        narrowBandWidth=narrowBandWidth,</span></td></tr><tr><th id="L68"><a href="#L68">68</a></th><td><span class="sd">    ...                        hasOld=1)</span></td></tr><tr><th id="L69"><a href="#L69">69</a></th><td><span class="sd">    &gt;&gt;&gt; y = mesh.getCellCenters()[...,1]</span></td></tr><tr><th id="L70"><a href="#L70">70</a></th><td><span class="sd">    &gt;&gt;&gt; phi.setValue(1, where=y &gt; (trenchDepth + spaceBelowTrench))</span></td></tr><tr><th id="L71"><a href="#L71">71</a></th><td><span class="sd">    &gt;&gt;&gt; phi.setValue(1, where=(y &gt; spaceBelowTrench) &amp;</span></td></tr><tr><th id="L72"><a href="#L72">72</a></th><td><span class="sd">                              (x &gt; (trenchSpacing - trenchWidth) / 2.0) &amp;</span></td></tr><tr><th id="L73"><a href="#L73">73</a></th><td><span class="sd">                              (x &lt; (trenchSpacing + trenchWidth) / 2.0))</span></td></tr><tr><th id="L74"><a href="#L74">74</a></th><td><span class="sd">    &gt;&gt;&gt; distanceVar.calcDistanceFunction(narrowBandWidth=1e10)</span></td></tr><tr><th id="L75"><a href="#L75">75</a></th><td><span class="sd">    </span></td></tr><tr><th id="L76"><a href="#L76">76</a></th><td><span class="sd">    &gt;&gt;&gt; from fipy.models.levelSet.surfactant.surfactantVariable import \</span></td></tr><tr><th id="L77"><a href="#L77">77</a></th><td><span class="sd">    ...     SurfactantVariable</span></td></tr><tr><th id="L78"><a href="#L78">78</a></th><td><span class="sd">    &gt;&gt;&gt; catalystVar = SurfactantVariable(</span></td></tr><tr><th id="L79"><a href="#L79">79</a></th><td><span class="sd">    ...     value=initialCoverage,</span></td></tr><tr><th id="L80"><a href="#L80">80</a></th><td><span class="sd">    ...     distanceVar=distanceVar)</span></td></tr><tr><th id="L81"><a href="#L81">81</a></th><td><span class="sd"></span></td></tr><tr><th id="L82"><a href="#L82">82</a></th><td><span class="sd"></span></td></tr><tr><th id="L83"><a href="#L83">83</a></th><td><span class="sd"></span></td></tr><tr><th id="L84"><a href="#L84">84</a></th><td><span class="sd"></span></td></tr><tr><th id="L85"><a href="#L85">85</a></th><td><span class="sd"></span></td></tr><tr><th id="L86"><a href="#L86">86</a></th><td><span class="sd"></span></td></tr><tr><th id="L87"><a href="#L87">87</a></th><td><span class="sd"></span></td></tr><tr><th id="L88"><a href="#L88">88</a></th><td><span class="sd">physical constants,</span></td></tr><tr><th id="L89"><a href="#L89">89</a></th><td><span class="sd"></span></td></tr><tr><th id="L90"><a href="#L90">90</a></th><td><span class="sd">   &gt;&gt;&gt; faradaysConstant = 9.6e4</span></td></tr><tr><th id="L91"><a href="#L91">91</a></th><td><span class="sd">   &gt;&gt;&gt; gasConstant = 8.314</span></td></tr><tr><th id="L92"><a href="#L92">92</a></th><td><span class="sd">   &gt;&gt;&gt; transferCoefficient = 0.5</span></td></tr><tr><th id="L93"><a href="#L93">93</a></th><td><span class="sd"></span></td></tr><tr><th id="L94"><a href="#L94">94</a></th><td><span class="sd">properties associated with the catalyst species,</span></td></tr><tr><th id="L95"><a href="#L95">95</a></th><td><span class="sd"></span></td></tr><tr><th id="L96"><a href="#L96">96</a></th><td><span class="sd">   &gt;&gt;&gt; rateConstant0 = 1.76</span></td></tr><tr><th id="L97"><a href="#L97">97</a></th><td><span class="sd">   &gt;&gt;&gt; rateConstant3 = -245e-6</span></td></tr><tr><th id="L98"><a href="#L98">98</a></th><td><span class="sd">   &gt;&gt;&gt; catalystDiffusion = 1e-9</span></td></tr><tr><th id="L99"><a href="#L99">99</a></th><td><span class="sd">   &gt;&gt;&gt; siteDensity = 9.8e-6</span></td></tr><tr><th id="L100"><a href="#L100">100</a></th><td><span class="sd">   </span></td></tr><tr><th id="L101"><a href="#L101">101</a></th><td><span class="sd">properties of the cupric ions,</span></td></tr><tr><th id="L102"><a href="#L102">102</a></th><td><span class="sd"></span></td></tr><tr><th id="L103"><a href="#L103">103</a></th><td><span class="sd">   &gt;&gt;&gt; molarVolume = 7.1e-6</span></td></tr><tr><th id="L104"><a href="#L104">104</a></th><td><span class="sd">   &gt;&gt;&gt; charge = 2</span></td></tr><tr><th id="L105"><a href="#L105">105</a></th><td><span class="sd">   &gt;&gt;&gt; metalDiffusionCoefficient = 5.6e-10</span></td></tr><tr><th id="L106"><a href="#L106">106</a></th><td><span class="sd"></span></td></tr><tr><th id="L107"><a href="#L107">107</a></th><td><span class="sd">parameters dependent on experimental constraints,</span></td></tr><tr><th id="L108"><a href="#L108">108</a></th><td><span class="sd"></span></td></tr><tr><th id="L109"><a href="#L109">109</a></th><td><span class="sd">   &gt;&gt;&gt; temperature = 298.</span></td></tr><tr><th id="L110"><a href="#L110">110</a></th><td><span class="sd">   &gt;&gt;&gt; overpotential = -0.3</span></td></tr><tr><th id="L111"><a href="#L111">111</a></th><td><span class="sd">   &gt;&gt;&gt; bulkMetalConcentration = 250.</span></td></tr><tr><th id="L112"><a href="#L112">112</a></th><td><span class="sd">   &gt;&gt;&gt; catalystConcentration = 5e-3</span></td></tr><tr><th id="L113"><a href="#L113">113</a></th><td><span class="sd">   &gt;&gt;&gt; catalystCoverage = 0.</span></td></tr><tr><th id="L114"><a href="#L114">114</a></th><td><span class="sd">      </span></td></tr><tr><th id="L115"><a href="#L115">115</a></th><td><span class="sd">parameters obtained from experiments on flat copper electrodes,</span></td></tr><tr><th id="L116"><a href="#L116">116</a></th><td><span class="sd"></span></td></tr><tr><th id="L117"><a href="#L117">117</a></th><td><span class="sd">   &gt;&gt;&gt; currentDensity0 = 0.26</span></td></tr><tr><th id="L118"><a href="#L118">118</a></th><td><span class="sd">   &gt;&gt;&gt; currentDensity1 = 45.</span></td></tr><tr><th id="L119"><a href="#L119">119</a></th><td><span class="sd"></span></td></tr><tr><th id="L120"><a href="#L120">120</a></th><td><span class="sd">general simulation control parameters,</span></td></tr><tr><th id="L121"><a href="#L121">121</a></th><td><span class="sd"></span></td></tr><tr><th id="L122"><a href="#L122">122</a></th><td><span class="sd">   &gt;&gt;&gt; cflNumber = 0.2</span></td></tr><tr><th id="L123"><a href="#L123">123</a></th><td><span class="sd">   &gt;&gt;&gt; numberOfCellsInNarrowBand = 10</span></td></tr><tr><th id="L124"><a href="#L124">124</a></th><td><span class="sd">   &gt;&gt;&gt; cellsBelowTrench = 10</span></td></tr><tr><th id="L125"><a href="#L125">125</a></th><td><span class="sd">   &gt;&gt;&gt; cellSize = 0.1e-7</span></td></tr><tr><th id="L126"><a href="#L126">126</a></th><td><span class="sd">   </span></td></tr><tr><th id="L127"><a href="#L127">127</a></th><td><span class="sd">parameters required for a trench geometry,</span></td></tr><tr><th id="L128"><a href="#L128">128</a></th><td><span class="sd"></span></td></tr><tr><th id="L129"><a href="#L129">129</a></th><td><span class="sd">   &gt;&gt;&gt; trenchDepth = 0.5e-6</span></td></tr><tr><th id="L130"><a href="#L130">130</a></th><td><span class="sd">   &gt;&gt;&gt; aspectRatio = 2.</span></td></tr><tr><th id="L131"><a href="#L131">131</a></th><td><span class="sd">   &gt;&gt;&gt; trenchSpacing = 0.6e-6</span></td></tr><tr><th id="L132"><a href="#L132">132</a></th><td><span class="sd">   &gt;&gt;&gt; boundaryLayerDepth = 0.3e-6</span></td></tr><tr><th id="L133"><a href="#L133">133</a></th><td><span class="sd">   </span></td></tr><tr><th id="L134"><a href="#L134">134</a></th><td><span class="sd">The hydrodynamic boundary layer depth (`boundaryLayerDepth`) is</span></td></tr><tr><th id="L135"><a href="#L135">135</a></th><td><span class="sd">intentionally small in this example to keep the mesh at a reasonable</span></td></tr><tr><th id="L136"><a href="#L136">136</a></th><td><span class="sd">size.</span></td></tr><tr><th id="L137"><a href="#L137">137</a></th><td><span class="sd"></span></td></tr><tr><th id="L138"><a href="#L138">138</a></th><td><span class="sd">Build the mesh:</span></td></tr><tr><th id="L139"><a href="#L139">139</a></th><td><span class="sd"></span></td></tr><tr><th id="L140"><a href="#L140">140</a></th><td><span class="sd"></span></td></tr><tr><th id="L141"><a href="#L141">141</a></th><td><span class="sd">   &gt;&gt;&gt; from fipy.tools.parser import parse</span></td></tr><tr><th id="L142"><a href="#L142">142</a></th><td><span class="sd">   &gt;&gt;&gt; numberOfElements = parse('--numberOfElements', action='store',</span></td></tr><tr><th id="L143"><a href="#L143">143</a></th><td><span class="sd">   ...     type='int', default=-1)</span></td></tr><tr><th id="L144"><a href="#L144">144</a></th><td><span class="sd">   &gt;&gt;&gt; numberOfSteps = parse('--numberOfSteps', action='store',</span></td></tr><tr><th id="L145"><a href="#L145">145</a></th><td><span class="sd">   ...     type='int', default=5)</span></td></tr><tr><th id="L146"><a href="#L146">146</a></th><td><span class="sd"></span></td></tr><tr><th id="L147"><a href="#L147">147</a></th><td><span class="sd"></span></td></tr><tr><th id="L148"><a href="#L148">148</a></th><td><span class="sd">   &gt;&gt;&gt; from fipy.tools.numerix import sqrt, exp, max</span></td></tr><tr><th id="L149"><a href="#L149">149</a></th><td><span class="sd">   &gt;&gt;&gt; if numberOfElements != -1:</span></td></tr><tr><th id="L150"><a href="#L150">150</a></th><td><span class="sd">   ...     pos = trenchSpacing * cellsBelowTrench / 4 / numberOfElements</span></td></tr><tr><th id="L151"><a href="#L151">151</a></th><td><span class="sd">   ...     sqr = trenchSpacing * (trenchDepth + boundaryLayerDepth) \</span></td></tr><tr><th id="L152"><a href="#L152">152</a></th><td><span class="sd">   ...           / (2 * numberOfElements)</span></td></tr><tr><th id="L153"><a href="#L153">153</a></th><td><span class="sd">   ...     cellSize = pos + sqrt(pos**2 + sqr)</span></td></tr><tr><th id="L154"><a href="#L154">154</a></th><td><span class="sd">   ... else:</span></td></tr><tr><th id="L155"><a href="#L155">155</a></th><td><span class="sd">   ...     cellSize = 0.1e-7</span></td></tr><tr><th id="L156"><a href="#L156">156</a></th><td><span class="sd"></span></td></tr><tr><th id="L157"><a href="#L157">157</a></th><td><span class="sd">   &gt;&gt;&gt; yCells = cellsBelowTrench \</span></td></tr><tr><th id="L158"><a href="#L158">158</a></th><td><span class="sd">   ...          + int((trenchDepth + boundaryLayerDepth) / cellSize)</span></td></tr><tr><th id="L159"><a href="#L159">159</a></th><td><span class="sd">   &gt;&gt;&gt; xCells = int(trenchSpacing / 2 / cellSize)</span></td></tr><tr><th id="L160"><a href="#L160">160</a></th><td><span class="sd"></span></td></tr><tr><th id="L161"><a href="#L161">161</a></th><td><span class="sd"></span></td></tr><tr><th id="L162"><a href="#L162">162</a></th><td><span class="sd">   &gt;&gt;&gt; from fipy.meshes.grid2D import Grid2D</span></td></tr><tr><th id="L163"><a href="#L163">163</a></th><td><span class="sd">   &gt;&gt;&gt; mesh = Grid2D(dx=cellSize,</span></td></tr><tr><th id="L164"><a href="#L164">164</a></th><td><span class="sd">   ...               dy=cellSize,</span></td></tr><tr><th id="L165"><a href="#L165">165</a></th><td><span class="sd">   ...               nx=xCells,</span></td></tr><tr><th id="L166"><a href="#L166">166</a></th><td><span class="sd">   ...               ny=yCells)</span></td></tr><tr><th id="L167"><a href="#L167">167</a></th><td><span class="sd"></span></td></tr><tr><th id="L168"><a href="#L168">168</a></th><td><span class="sd">A `distanceVariable` object,</span></td></tr><tr><th id="L169"><a href="#L169">169</a></th><td><span class="sd"></span></td></tr><tr><th id="L170"><a href="#L170">170</a></th><td><span class="sd">.. raw :: latex</span></td></tr><tr><th id="L171"><a href="#L171">171</a></th><td><span class="sd"></span></td></tr><tr><th id="L172"><a href="#L172">172</a></th><td><span class="sd">    $\phi$, is  required to store  the  position of the interface  .</span></td></tr><tr><th id="L173"><a href="#L173">173</a></th><td><span class="sd"></span></td></tr><tr><th id="L174"><a href="#L174">174</a></th><td><span class="sd">The `distanceVariable` calculates its value so that it is a distance</span></td></tr><tr><th id="L175"><a href="#L175">175</a></th><td><span class="sd">function </span></td></tr><tr><th id="L176"><a href="#L176">176</a></th><td><span class="sd"></span></td></tr><tr><th id="L177"><a href="#L177">177</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L178"><a href="#L178">178</a></th><td><span class="sd"></span></td></tr><tr><th id="L179"><a href="#L179">179</a></th><td><span class="sd">   (\emph{i.e.} holds the distance at any point in the mesh from the electrolyte/metal</span></td></tr><tr><th id="L180"><a href="#L180">180</a></th><td><span class="sd">   interface at $\phi$ = 0) and $|\nabla\phi| = 1$.</span></td></tr><tr><th id="L181"><a href="#L181">181</a></th><td><span class="sd"></span></td></tr><tr><th id="L182"><a href="#L182">182</a></th><td><span class="sd">   First, create the $\phi$ variable, which is initially set to -1 everywhere. </span></td></tr><tr><th id="L183"><a href="#L183">183</a></th><td><span class="sd">   Create an initial variable,</span></td></tr><tr><th id="L184"><a href="#L184">184</a></th><td><span class="sd"></span></td></tr><tr><th id="L185"><a href="#L185">185</a></th><td><span class="sd">..</span></td></tr><tr><th id="L186"><a href="#L186">186</a></th><td><span class="sd"></span></td></tr><tr><th id="L187"><a href="#L187">187</a></th><td><span class="sd">   &gt;&gt;&gt; narrowBandWidth = numberOfCellsInNarrowBand * cellSize</span></td></tr><tr><th id="L188"><a href="#L188">188</a></th><td><span class="sd">   &gt;&gt;&gt; from fipy.models.levelSet.distanceFunction.distanceVariable import \</span></td></tr><tr><th id="L189"><a href="#L189">189</a></th><td><span class="sd">   ...     DistanceVariable        </span></td></tr><tr><th id="L190"><a href="#L190">190</a></th><td><span class="sd">   &gt;&gt;&gt; distanceVar = DistanceVariable(</span></td></tr><tr><th id="L191"><a href="#L191">191</a></th><td><span class="sd">   ...    name='distance variable',</span></td></tr><tr><th id="L192"><a href="#L192">192</a></th><td><span class="sd">   ...    mesh= mesh,</span></td></tr><tr><th id="L193"><a href="#L193">193</a></th><td><span class="sd">   ...    value=-1,</span></td></tr><tr><th id="L194"><a href="#L194">194</a></th><td><span class="sd">   ...    narrowBandWidth=narrowBandWidth,</span></td></tr><tr><th id="L195"><a href="#L195">195</a></th><td><span class="sd">   ...    hasOld=1)</span></td></tr><tr><th id="L196"><a href="#L196">196</a></th><td><span class="sd"></span></td></tr><tr><th id="L197"><a href="#L197">197</a></th><td><span class="sd">The electrolyte region will be the positive region of the domain while the metal</span></td></tr><tr><th id="L198"><a href="#L198">198</a></th><td><span class="sd">region will be negative.</span></td></tr><tr><th id="L199"><a href="#L199">199</a></th><td><span class="sd"></span></td></tr><tr><th id="L200"><a href="#L200">200</a></th><td><span class="sd">   &gt;&gt;&gt; bottomHeight = cellsBelowTrench * cellSize</span></td></tr><tr><th id="L201"><a href="#L201">201</a></th><td><span class="sd">   &gt;&gt;&gt; trenchHeight = bottomHeight + trenchDepth</span></td></tr><tr><th id="L202"><a href="#L202">202</a></th><td><span class="sd">   &gt;&gt;&gt; trenchWidth = trenchDepth / aspectRatio</span></td></tr><tr><th id="L203"><a href="#L203">203</a></th><td><span class="sd">   &gt;&gt;&gt; sideWidth = (trenchSpacing - trenchWidth) / 2</span></td></tr><tr><th id="L204"><a href="#L204">204</a></th><td><span class="sd">   </span></td></tr><tr><th id="L205"><a href="#L205">205</a></th><td><span class="sd">   &gt;&gt;&gt; x, y = mesh.getCellCenters()[...,0], mesh.getCellCenters()[...,1]</span></td></tr><tr><th id="L206"><a href="#L206">206</a></th><td><span class="sd">   &gt;&gt;&gt; distanceVar.setValue(1, where=(y &gt; trenchHeight) </span></td></tr><tr><th id="L207"><a href="#L207">207</a></th><td><span class="sd">   ...                               | ((y &gt; bottomHeight) </span></td></tr><tr><th id="L208"><a href="#L208">208</a></th><td><span class="sd">   ...                                  &amp; (x &lt; xCells * cellSize - sideWidth)))</span></td></tr><tr><th id="L209"><a href="#L209">209</a></th><td><span class="sd"></span></td></tr><tr><th id="L210"><a href="#L210">210</a></th><td><span class="sd">   &gt;&gt;&gt; distanceVar.calcDistanceFunction(narrowBandWidth=1e10)</span></td></tr><tr><th id="L211"><a href="#L211">211</a></th><td><span class="sd"></span></td></tr><tr><th id="L212"><a href="#L212">212</a></th><td><span class="sd">The `distanceVariable` has now been created to mark the interface. Some other</span></td></tr><tr><th id="L213"><a href="#L213">213</a></th><td><span class="sd">variables need to be created that govern the concentrations of various species.</span></td></tr><tr><th id="L214"><a href="#L214">214</a></th><td><span class="sd"></span></td></tr><tr><th id="L215"><a href="#L215">215</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L216"><a href="#L216">216</a></th><td><span class="sd"></span></td></tr><tr><th id="L217"><a href="#L217">217</a></th><td><span class="sd">    Create the catalyst surfactant coverage, $\theta$, variable.</span></td></tr><tr><th id="L218"><a href="#L218">218</a></th><td><span class="sd">    This variable influences the deposition rate.</span></td></tr><tr><th id="L219"><a href="#L219">219</a></th><td><span class="sd"></span></td></tr><tr><th id="L220"><a href="#L220">220</a></th><td><span class="sd"> ..</span></td></tr><tr><th id="L221"><a href="#L221">221</a></th><td><span class="sd"></span></td></tr><tr><th id="L222"><a href="#L222">222</a></th><td><span class="sd">   &gt;&gt;&gt; from fipy.models.levelSet.surfactant.surfactantVariable import \</span></td></tr><tr><th id="L223"><a href="#L223">223</a></th><td><span class="sd">   ...     SurfactantVariable</span></td></tr><tr><th id="L224"><a href="#L224">224</a></th><td><span class="sd">   &gt;&gt;&gt; catalystVar = SurfactantVariable(</span></td></tr><tr><th id="L225"><a href="#L225">225</a></th><td><span class="sd">   ...     name="catalyst variable",</span></td></tr><tr><th id="L226"><a href="#L226">226</a></th><td><span class="sd">   ...     value=catalystCoverage,</span></td></tr><tr><th id="L227"><a href="#L227">227</a></th><td><span class="sd">   ...     distanceVar=distanceVar)</span></td></tr><tr><th id="L228"><a href="#L228">228</a></th><td><span class="sd"></span></td></tr><tr><th id="L229"><a href="#L229">229</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L230"><a href="#L230">230</a></th><td><span class="sd"></span></td></tr><tr><th id="L231"><a href="#L231">231</a></th><td><span class="sd">    Create the bulk catalyst concentration, $c_{\theta}$,</span></td></tr><tr><th id="L232"><a href="#L232">232</a></th><td><span class="sd">    in the electrolyte,</span></td></tr><tr><th id="L233"><a href="#L233">233</a></th><td><span class="sd"></span></td></tr><tr><th id="L234"><a href="#L234">234</a></th><td><span class="sd">..</span></td></tr><tr><th id="L235"><a href="#L235">235</a></th><td><span class="sd"></span></td></tr><tr><th id="L236"><a href="#L236">236</a></th><td><span class="sd">   &gt;&gt;&gt; from fipy.variables.cellVariable import CellVariable</span></td></tr><tr><th id="L237"><a href="#L237">237</a></th><td><span class="sd">   &gt;&gt;&gt; bulkCatalystVar = CellVariable(</span></td></tr><tr><th id="L238"><a href="#L238">238</a></th><td><span class="sd">   ...     name='bulk catalyst variable',</span></td></tr><tr><th id="L239"><a href="#L239">239</a></th><td><span class="sd">   ...     mesh=mesh,</span></td></tr><tr><th id="L240"><a href="#L240">240</a></th><td><span class="sd">   ...     value=catalystConcentration)</span></td></tr><tr><th id="L241"><a href="#L241">241</a></th><td><span class="sd">   </span></td></tr><tr><th id="L242"><a href="#L242">242</a></th><td><span class="sd">Create the bulk metal ion concentration,</span></td></tr><tr><th id="L243"><a href="#L243">243</a></th><td><span class="sd"></span></td></tr><tr><th id="L244"><a href="#L244">244</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L245"><a href="#L245">245</a></th><td><span class="sd"></span></td></tr><tr><th id="L246"><a href="#L246">246</a></th><td><span class="sd">    $c_m$,</span></td></tr><tr><th id="L247"><a href="#L247">247</a></th><td><span class="sd"></span></td></tr><tr><th id="L248"><a href="#L248">248</a></th><td><span class="sd">in the electrolyte.</span></td></tr><tr><th id="L249"><a href="#L249">249</a></th><td><span class="sd">        </span></td></tr><tr><th id="L250"><a href="#L250">250</a></th><td><span class="sd">   &gt;&gt;&gt; metalVar = CellVariable(</span></td></tr><tr><th id="L251"><a href="#L251">251</a></th><td><span class="sd">   ...     name='metal variable',</span></td></tr><tr><th id="L252"><a href="#L252">252</a></th><td><span class="sd">   ...     mesh=mesh,</span></td></tr><tr><th id="L253"><a href="#L253">253</a></th><td><span class="sd">   ...     value=bulkMetalConcentration)</span></td></tr><tr><th id="L254"><a href="#L254">254</a></th><td><span class="sd"></span></td></tr><tr><th id="L255"><a href="#L255">255</a></th><td><span class="sd">The following commands build the `depositionRateVariable`,</span></td></tr><tr><th id="L256"><a href="#L256">256</a></th><td><span class="sd"></span></td></tr><tr><th id="L257"><a href="#L257">257</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L258"><a href="#L258">258</a></th><td><span class="sd"></span></td></tr><tr><th id="L259"><a href="#L259">259</a></th><td><span class="sd">    $v$.</span></td></tr><tr><th id="L260"><a href="#L260">260</a></th><td><span class="sd"></span></td></tr><tr><th id="L261"><a href="#L261">261</a></th><td><span class="sd">The `depositionRateVariable` is given by the following equation.</span></td></tr><tr><th id="L262"><a href="#L262">262</a></th><td><span class="sd"></span></td></tr><tr><th id="L263"><a href="#L263">263</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L264"><a href="#L264">264</a></th><td><span class="sd"></span></td></tr><tr><th id="L265"><a href="#L265">265</a></th><td><span class="sd">    $$ v = \frac{i \Omega}{n F} $$</span></td></tr><tr><th id="L266"><a href="#L266">266</a></th><td><span class="sd"></span></td></tr><tr><th id="L267"><a href="#L267">267</a></th><td><span class="sd">    where $\Omega$ is the metal molar volume, $n$ is the metal ion</span></td></tr><tr><th id="L268"><a href="#L268">268</a></th><td><span class="sd">    charge and $F$ is Faraday's constant. The current density is given</span></td></tr><tr><th id="L269"><a href="#L269">269</a></th><td><span class="sd">    by</span></td></tr><tr><th id="L270"><a href="#L270">270</a></th><td><span class="sd"></span></td></tr><tr><th id="L271"><a href="#L271">271</a></th><td><span class="sd">    $$ i = i_0 \frac{c_m^i}{c_m^{\infty}} \exp{ \left( \frac{- \alpha F}{R T} \eta \right) } $$</span></td></tr><tr><th id="L272"><a href="#L272">272</a></th><td><span class="sd"></span></td></tr><tr><th id="L273"><a href="#L273">273</a></th><td><span class="sd">    where $c_m^i$ is the metal ion concentration in the bulk at the</span></td></tr><tr><th id="L274"><a href="#L274">274</a></th><td><span class="sd">    interface, $c_m^{\infty}$ is the far-field bulk concentration of</span></td></tr><tr><th id="L275"><a href="#L275">275</a></th><td><span class="sd">    metal ions, $\alpha$ is the transfer coefficient, $R$ is the gas</span></td></tr><tr><th id="L276"><a href="#L276">276</a></th><td><span class="sd">    constant, $T$ is the temperature and $\eta$ is the</span></td></tr><tr><th id="L277"><a href="#L277">277</a></th><td><span class="sd">    overpotential. The exchange current density is an empirical</span></td></tr><tr><th id="L278"><a href="#L278">278</a></th><td><span class="sd">    function of catalyst coverage,</span></td></tr><tr><th id="L279"><a href="#L279">279</a></th><td><span class="sd"></span></td></tr><tr><th id="L280"><a href="#L280">280</a></th><td><span class="sd">    $$ i_0(\theta) = b_0 + b_1 \theta $$</span></td></tr><tr><th id="L281"><a href="#L281">281</a></th><td><span class="sd"></span></td></tr><tr><th id="L282"><a href="#L282">282</a></th><td><span class="sd">The commands needed to build this equation are,</span></td></tr><tr><th id="L283"><a href="#L283">283</a></th><td><span class="sd"></span></td></tr><tr><th id="L284"><a href="#L284">284</a></th><td><span class="sd">   &gt;&gt;&gt; expoConstant = -transferCoefficient * faradaysConstant \</span></td></tr><tr><th id="L285"><a href="#L285">285</a></th><td><span class="sd">   ...                / (gasConstant * temperature)</span></td></tr><tr><th id="L286"><a href="#L286">286</a></th><td><span class="sd">   &gt;&gt;&gt; tmp = currentDensity1 \</span></td></tr><tr><th id="L287"><a href="#L287">287</a></th><td><span class="sd">   ...       * catalystVar.getInterfaceVar()</span></td></tr><tr><th id="L288"><a href="#L288">288</a></th><td><span class="sd">   &gt;&gt;&gt; exchangeCurrentDensity = currentDensity0 + tmp</span></td></tr><tr><th id="L289"><a href="#L289">289</a></th><td><span class="sd">   &gt;&gt;&gt; expo = exp(expoConstant * overpotential)</span></td></tr><tr><th id="L290"><a href="#L290">290</a></th><td><span class="sd">   &gt;&gt;&gt; currentDensity = expo * exchangeCurrentDensity * metalVar \</span></td></tr><tr><th id="L291"><a href="#L291">291</a></th><td><span class="sd">   ...                  / bulkMetalConcentration</span></td></tr><tr><th id="L292"><a href="#L292">292</a></th><td><span class="sd">   &gt;&gt;&gt; depositionRateVariable = currentDensity * molarVolume \</span></td></tr><tr><th id="L293"><a href="#L293">293</a></th><td><span class="sd">   ...                          / (charge * faradaysConstant)</span></td></tr><tr><th id="L294"><a href="#L294">294</a></th><td><span class="sd"></span></td></tr><tr><th id="L295"><a href="#L295">295</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L296"><a href="#L296">296</a></th><td><span class="sd"></span></td></tr><tr><th id="L297"><a href="#L297">297</a></th><td><span class="sd">    Build the extension velocity variable $v_{\text{ext}}$. The extension</span></td></tr><tr><th id="L298"><a href="#L298">298</a></th><td><span class="sd">    velocity uses the</span></td></tr><tr><th id="L299"><a href="#L299">299</a></th><td><span class="sd"></span></td></tr><tr><th id="L300"><a href="#L300">300</a></th><td><span class="sd">`extensionEquation` to spread the velocity at the interface to the</span></td></tr><tr><th id="L301"><a href="#L301">301</a></th><td><span class="sd">rest of the domain.</span></td></tr><tr><th id="L302"><a href="#L302">302</a></th><td><span class="sd"></span></td></tr><tr><th id="L303"><a href="#L303">303</a></th><td><span class="sd">   &gt;&gt;&gt; extensionVelocityVariable = CellVariable(</span></td></tr><tr><th id="L304"><a href="#L304">304</a></th><td><span class="sd">   ...     name='extension velocity',</span></td></tr><tr><th id="L305"><a href="#L305">305</a></th><td><span class="sd">   ...     mesh=mesh,</span></td></tr><tr><th id="L306"><a href="#L306">306</a></th><td><span class="sd">   ...     value=depositionRateVariable)   </span></td></tr><tr><th id="L307"><a href="#L307">307</a></th><td><span class="sd"></span></td></tr><tr><th id="L308"><a href="#L308">308</a></th><td><span class="sd">Using the variables created above the governing equations will be</span></td></tr><tr><th id="L309"><a href="#L309">309</a></th><td><span class="sd">built.  The governing equation for surfactant conservation is given</span></td></tr><tr><th id="L310"><a href="#L310">310</a></th><td><span class="sd">by,</span></td></tr><tr><th id="L311"><a href="#L311">311</a></th><td><span class="sd"></span></td></tr><tr><th id="L312"><a href="#L312">312</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L313"><a href="#L313">313</a></th><td><span class="sd"></span></td></tr><tr><th id="L314"><a href="#L314">314</a></th><td><span class="sd">    $$ \dot{\theta} = J v \theta + k c_{\theta}^i (1 - \theta) $$</span></td></tr><tr><th id="L315"><a href="#L315">315</a></th><td><span class="sd"></span></td></tr><tr><th id="L316"><a href="#L316">316</a></th><td><span class="sd">    where $\theta$ is the coverage of catalyst at the interface,</span></td></tr><tr><th id="L317"><a href="#L317">317</a></th><td><span class="sd">    $J$ is the curvature of the interface, $v$ is the normal velocity</span></td></tr><tr><th id="L318"><a href="#L318">318</a></th><td><span class="sd">    of the interface, $c_{\theta}^i$ is the concentration of</span></td></tr><tr><th id="L319"><a href="#L319">319</a></th><td><span class="sd">    catalyst in the bulk at the interface. The value $k$ is given</span></td></tr><tr><th id="L320"><a href="#L320">320</a></th><td><span class="sd">    by an empirical function of overpotential,</span></td></tr><tr><th id="L321"><a href="#L321">321</a></th><td><span class="sd">    $$ k = k_0 + k_3 \eta^3 $$</span></td></tr><tr><th id="L322"><a href="#L322">322</a></th><td><span class="sd">    The above equation is represented by the \Class{AdsorbingSurfactantEquation}</span></td></tr><tr><th id="L323"><a href="#L323">323</a></th><td><span class="sd">    in \FiPy{}:</span></td></tr><tr><th id="L324"><a href="#L324">324</a></th><td><span class="sd"></span></td></tr><tr><th id="L325"><a href="#L325">325</a></th><td><span class="sd">..</span></td></tr><tr><th id="L326"><a href="#L326">326</a></th><td><span class="sd"></span></td></tr><tr><th id="L327"><a href="#L327">327</a></th><td><span class="sd">   &gt;&gt;&gt; from fipy.models.levelSet.surfactant.adsorbingSurfactantEquation \</span></td></tr><tr><th id="L328"><a href="#L328">328</a></th><td><span class="sd">   ...             import AdsorbingSurfactantEquation</span></td></tr><tr><th id="L329"><a href="#L329">329</a></th><td><span class="sd">   &gt;&gt;&gt; surfactantEquation = AdsorbingSurfactantEquation(</span></td></tr><tr><th id="L330"><a href="#L330">330</a></th><td><span class="sd">   ...     surfactantVar=catalystVar,</span></td></tr><tr><th id="L331"><a href="#L331">331</a></th><td><span class="sd">   ...     distanceVar=distanceVar,</span></td></tr><tr><th id="L332"><a href="#L332">332</a></th><td><span class="sd">   ...     bulkVar=bulkCatalystVar,</span></td></tr><tr><th id="L333"><a href="#L333">333</a></th><td><span class="sd">   ...     rateConstant=rateConstant0 \</span></td></tr><tr><th id="L334"><a href="#L334">334</a></th><td><span class="sd">   ...                    + rateConstant3 * overpotential**3)</span></td></tr><tr><th id="L335"><a href="#L335">335</a></th><td><span class="sd"></span></td></tr><tr><th id="L336"><a href="#L336">336</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L337"><a href="#L337">337</a></th><td><span class="sd"></span></td></tr><tr><th id="L338"><a href="#L338">338</a></th><td><span class="sd">    The variable $\phi$ is advected by the</span></td></tr><tr><th id="L339"><a href="#L339">339</a></th><td><span class="sd"></span></td></tr><tr><th id="L340"><a href="#L340">340</a></th><td><span class="sd">`advectionEquation` given by,</span></td></tr><tr><th id="L341"><a href="#L341">341</a></th><td><span class="sd"></span></td></tr><tr><th id="L342"><a href="#L342">342</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L343"><a href="#L343">343</a></th><td><span class="sd"></span></td></tr><tr><th id="L344"><a href="#L344">344</a></th><td><span class="sd">    $$ \frac{\partial \phi}{\partial t} + v_{\text{ext}}|\nabla \phi| = 0 $$</span></td></tr><tr><th id="L345"><a href="#L345">345</a></th><td><span class="sd">    and is set up with the following commands:</span></td></tr><tr><th id="L346"><a href="#L346">346</a></th><td><span class="sd"></span></td></tr><tr><th id="L347"><a href="#L347">347</a></th><td><span class="sd">..</span></td></tr><tr><th id="L348"><a href="#L348">348</a></th><td><span class="sd"></span></td></tr><tr><th id="L349"><a href="#L349">349</a></th><td><span class="sd">   &gt;&gt;&gt; from fipy.models.levelSet.advection.higherOrderAdvectionEquation \</span></td></tr><tr><th id="L350"><a href="#L350">350</a></th><td><span class="sd">   ...                import buildHigherOrderAdvectionEquation</span></td></tr><tr><th id="L351"><a href="#L351">351</a></th><td><span class="sd">   &gt;&gt;&gt; advectionEquation = buildHigherOrderAdvectionEquation(</span></td></tr><tr><th id="L352"><a href="#L352">352</a></th><td><span class="sd">   ...     advectionCoeff=extensionVelocityVariable)</span></td></tr><tr><th id="L353"><a href="#L353">353</a></th><td><span class="sd"></span></td></tr><tr><th id="L354"><a href="#L354">354</a></th><td><span class="sd">The diffusion of metal ions from the far field to the interface is</span></td></tr><tr><th id="L355"><a href="#L355">355</a></th><td><span class="sd">governed by,</span></td></tr><tr><th id="L356"><a href="#L356">356</a></th><td><span class="sd"></span></td></tr><tr><th id="L357"><a href="#L357">357</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L358"><a href="#L358">358</a></th><td><span class="sd"></span></td></tr><tr><th id="L359"><a href="#L359">359</a></th><td><span class="sd">    $$ \frac{\partial c_m}{\partial t} = \nabla \cdot D \nabla  c_m $$</span></td></tr><tr><th id="L360"><a href="#L360">360</a></th><td><span class="sd"></span></td></tr><tr><th id="L361"><a href="#L361">361</a></th><td><span class="sd">    where,</span></td></tr><tr><th id="L362"><a href="#L362">362</a></th><td><span class="sd"></span></td></tr><tr><th id="L363"><a href="#L363">363</a></th><td><span class="sd">    $$ D = \begin{cases}</span></td></tr><tr><th id="L364"><a href="#L364">364</a></th><td><span class="sd">    D_m &amp; \text{when $\phi &gt; 0$,} \\</span></td></tr><tr><th id="L365"><a href="#L365">365</a></th><td><span class="sd">    0   &amp; \text{when $\phi \le 0$}</span></td></tr><tr><th id="L366"><a href="#L366">366</a></th><td><span class="sd">    \end{cases} $$</span></td></tr><tr><th id="L367"><a href="#L367">367</a></th><td><span class="sd"></span></td></tr><tr><th id="L368"><a href="#L368">368</a></th><td><span class="sd">    The following boundary condition applies at $\phi = 0$,</span></td></tr><tr><th id="L369"><a href="#L369">369</a></th><td><span class="sd">    $$ D \hat{n} \cdot \nabla c = \frac{v}{\Omega}. $$</span></td></tr><tr><th id="L370"><a href="#L370">370</a></th><td><span class="sd">    The \verb|MetalIonDiffusionEquation| is set up with the following commands.</span></td></tr><tr><th id="L371"><a href="#L371">371</a></th><td><span class="sd"></span></td></tr><tr><th id="L372"><a href="#L372">372</a></th><td><span class="sd">..</span></td></tr><tr><th id="L373"><a href="#L373">373</a></th><td><span class="sd"></span></td></tr><tr><th id="L374"><a href="#L374">374</a></th><td><span class="sd">   &gt;&gt;&gt; from fipy.boundaryConditions.fixedValue import FixedValue</span></td></tr><tr><th id="L375"><a href="#L375">375</a></th><td><span class="sd">   &gt;&gt;&gt; from fipy.models.levelSet.electroChem.metalIonDiffusionEquation \</span></td></tr><tr><th id="L376"><a href="#L376">376</a></th><td><span class="sd">   ...                      import buildMetalIonDiffusionEquation</span></td></tr><tr><th id="L377"><a href="#L377">377</a></th><td><span class="sd">   &gt;&gt;&gt; metalEquation = buildMetalIonDiffusionEquation(</span></td></tr><tr><th id="L378"><a href="#L378">378</a></th><td><span class="sd">   ...     ionVar=metalVar,</span></td></tr><tr><th id="L379"><a href="#L379">379</a></th><td><span class="sd">   ...     distanceVar=distanceVar,</span></td></tr><tr><th id="L380"><a href="#L380">380</a></th><td><span class="sd">   ...     depositionRate=depositionRateVariable,</span></td></tr><tr><th id="L381"><a href="#L381">381</a></th><td><span class="sd">   ...     diffusionCoeff=metalDiffusionCoefficient,</span></td></tr><tr><th id="L382"><a href="#L382">382</a></th><td><span class="sd">   ...     metalIonMolarVolume=molarVolume,</span></td></tr><tr><th id="L383"><a href="#L383">383</a></th><td><span class="sd">   ... )</span></td></tr><tr><th id="L384"><a href="#L384">384</a></th><td><span class="sd"></span></td></tr><tr><th id="L385"><a href="#L385">385</a></th><td><span class="sd">   &gt;&gt;&gt; metalEquationBCs = FixedValue(faces=mesh.getFacesTop(), value=bulkMetalConcentration)</span></td></tr><tr><th id="L386"><a href="#L386">386</a></th><td><span class="sd"></span></td></tr><tr><th id="L387"><a href="#L387">387</a></th><td><span class="sd">The `SurfactantBulkDiffusionEquation` solves the bulk diffusion of a</span></td></tr><tr><th id="L388"><a href="#L388">388</a></th><td><span class="sd">species with a source term for the jump from the bulk to an interface.</span></td></tr><tr><th id="L389"><a href="#L389">389</a></th><td><span class="sd">The governing equation is given by,</span></td></tr><tr><th id="L390"><a href="#L390">390</a></th><td><span class="sd"></span></td></tr><tr><th id="L391"><a href="#L391">391</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L392"><a href="#L392">392</a></th><td><span class="sd"></span></td></tr><tr><th id="L393"><a href="#L393">393</a></th><td><span class="sd">    $$ \frac{\partial c}{\partial t} = \nabla \cdot D \nabla  c $$</span></td></tr><tr><th id="L394"><a href="#L394">394</a></th><td><span class="sd"></span></td></tr><tr><th id="L395"><a href="#L395">395</a></th><td><span class="sd">where,</span></td></tr><tr><th id="L396"><a href="#L396">396</a></th><td><span class="sd"></span></td></tr><tr><th id="L397"><a href="#L397">397</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L398"><a href="#L398">398</a></th><td><span class="sd"></span></td></tr><tr><th id="L399"><a href="#L399">399</a></th><td><span class="sd">    $$ D = \begin{cases}</span></td></tr><tr><th id="L400"><a href="#L400">400</a></th><td><span class="sd">    D_{\theta} &amp; \text{when $\phi &gt; 0$} \\</span></td></tr><tr><th id="L401"><a href="#L401">401</a></th><td><span class="sd">    0          &amp; \text{when $\phi \le 0$}</span></td></tr><tr><th id="L402"><a href="#L402">402</a></th><td><span class="sd">    \end{cases} $$</span></td></tr><tr><th id="L403"><a href="#L403">403</a></th><td><span class="sd"></span></td></tr><tr><th id="L404"><a href="#L404">404</a></th><td><span class="sd">The jump condition at the interface is defined by Langmuir</span></td></tr><tr><th id="L405"><a href="#L405">405</a></th><td><span class="sd">adsorption. Langmuir adsorption essentially states that the ability</span></td></tr><tr><th id="L406"><a href="#L406">406</a></th><td><span class="sd">for a species to jump from an electrolyte to an interface is</span></td></tr><tr><th id="L407"><a href="#L407">407</a></th><td><span class="sd">proportional to the concentration in the electrolyte, available site</span></td></tr><tr><th id="L408"><a href="#L408">408</a></th><td><span class="sd">density and a jump coefficient. The boundary condition</span></td></tr><tr><th id="L409"><a href="#L409">409</a></th><td><span class="sd"></span></td></tr><tr><th id="L410"><a href="#L410">410</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L411"><a href="#L411">411</a></th><td><span class="sd"></span></td></tr><tr><th id="L412"><a href="#L412">412</a></th><td><span class="sd">    at $\phi = 0$ is given by,</span></td></tr><tr><th id="L413"><a href="#L413">413</a></th><td><span class="sd">    $$ D \hat{n} \cdot \nabla c = -k c (1 - \theta). $$</span></td></tr><tr><th id="L414"><a href="#L414">414</a></th><td><span class="sd">    The \verb|SurfactantBulkDiffusionEquation| is set up with the following commands.</span></td></tr><tr><th id="L415"><a href="#L415">415</a></th><td><span class="sd"></span></td></tr><tr><th id="L416"><a href="#L416">416</a></th><td><span class="sd">..</span></td></tr><tr><th id="L417"><a href="#L417">417</a></th><td><span class="sd"></span></td></tr><tr><th id="L418"><a href="#L418">418</a></th><td><span class="sd">   &gt;&gt;&gt; from fipy.models.levelSet.surfactant.surfactantBulkDiffusionEquation \</span></td></tr><tr><th id="L419"><a href="#L419">419</a></th><td><span class="sd">   ...                 import buildSurfactantBulkDiffusionEquation</span></td></tr><tr><th id="L420"><a href="#L420">420</a></th><td><span class="sd">   &gt;&gt;&gt; bulkCatalystEquation = buildSurfactantBulkDiffusionEquation(</span></td></tr><tr><th id="L421"><a href="#L421">421</a></th><td><span class="sd">   ...     bulkVar=bulkCatalystVar,</span></td></tr><tr><th id="L422"><a href="#L422">422</a></th><td><span class="sd">   ...     distanceVar=distanceVar,</span></td></tr><tr><th id="L423"><a href="#L423">423</a></th><td><span class="sd">   ...     surfactantVar=catalystVar,</span></td></tr><tr><th id="L424"><a href="#L424">424</a></th><td><span class="sd">   ...     diffusionCoeff=catalystDiffusion,</span></td></tr><tr><th id="L425"><a href="#L425">425</a></th><td><span class="sd">   ...     rateConstant=rateConstant0 * siteDensity</span></td></tr><tr><th id="L426"><a href="#L426">426</a></th><td><span class="sd">   ... )</span></td></tr><tr><th id="L427"><a href="#L427">427</a></th><td><span class="sd"></span></td></tr><tr><th id="L428"><a href="#L428">428</a></th><td><span class="sd">   &gt;&gt;&gt; catalystBCs = FixedValue(faces=mesh.getFacesTop(), value=catalystConcentration)</span></td></tr><tr><th id="L429"><a href="#L429">429</a></th><td><span class="sd">   </span></td></tr><tr><th id="L430"><a href="#L430">430</a></th><td><span class="sd">If running interactively, create viewers.</span></td></tr><tr><th id="L431"><a href="#L431">431</a></th><td><span class="sd"></span></td></tr><tr><th id="L432"><a href="#L432">432</a></th><td><span class="sd">   &gt;&gt;&gt; if __name__ == '__main__':</span></td></tr><tr><th id="L433"><a href="#L433">433</a></th><td><span class="sd">   ...     try:</span></td></tr><tr><th id="L434"><a href="#L434">434</a></th><td><span class="sd">   ...         from fipy.viewers.mayaviViewer.mayaviSurfactantViewer import MayaviSurfactantViewer</span></td></tr><tr><th id="L435"><a href="#L435">435</a></th><td><span class="sd">   ...         viewers = (</span></td></tr><tr><th id="L436"><a href="#L436">436</a></th><td><span class="sd">   ...             MayaviSurfactantViewer(distanceVar,</span></td></tr><tr><th id="L437"><a href="#L437">437</a></th><td><span class="sd">   ...                                    catalystVar.getInterfaceVar(),</span></td></tr><tr><th id="L438"><a href="#L438">438</a></th><td><span class="sd">   ...                                    zoomFactor=1e6,</span></td></tr><tr><th id="L439"><a href="#L439">439</a></th><td><span class="sd">   ...                                    limits={ 'datamax' : 1.0, 'datamin' : 0.0 },</span></td></tr><tr><th id="L440"><a href="#L440">440</a></th><td><span class="sd">   ...                                    smooth=1),)</span></td></tr><tr><th id="L441"><a href="#L441">441</a></th><td><span class="sd">   ...     except:</span></td></tr><tr><th id="L442"><a href="#L442">442</a></th><td><span class="sd">   ...         from fipy.viewers import make</span></td></tr><tr><th id="L443"><a href="#L443">443</a></th><td><span class="sd">   ...         viewers = (</span></td></tr><tr><th id="L444"><a href="#L444">444</a></th><td><span class="sd">   ...             make(distanceVar, limits={ 'datamin' :-1e-9 , 'datamax' : 1e-9 }),</span></td></tr><tr><th id="L445"><a href="#L445">445</a></th><td><span class="sd">   ...             make(catalystVar.getInterfaceVar()))</span></td></tr><tr><th id="L446"><a href="#L446">446</a></th><td><span class="sd">   ... else:</span></td></tr><tr><th id="L447"><a href="#L447">447</a></th><td><span class="sd">   ...     viewers = ()</span></td></tr><tr><th id="L448"><a href="#L448">448</a></th><td><span class="sd"></span></td></tr><tr><th id="L449"><a href="#L449">449</a></th><td><span class="sd">The `levelSetUpdateFrequency` defines how often to call the</span></td></tr><tr><th id="L450"><a href="#L450">450</a></th><td><span class="sd">`distanceEquation` to reinitialize the `distanceVariable` to a</span></td></tr><tr><th id="L451"><a href="#L451">451</a></th><td><span class="sd">distance function.</span></td></tr><tr><th id="L452"><a href="#L452">452</a></th><td><span class="sd"></span></td></tr><tr><th id="L453"><a href="#L453">453</a></th><td><span class="sd">   &gt;&gt;&gt; levelSetUpdateFrequency = int(0.8 * narrowBandWidth \</span></td></tr><tr><th id="L454"><a href="#L454">454</a></th><td><span class="sd">   ...                               / (cellSize * cflNumber * 2))</span></td></tr><tr><th id="L455"><a href="#L455">455</a></th><td><span class="sd"></span></td></tr><tr><th id="L456"><a href="#L456">456</a></th><td><span class="sd">The following loop runs for `numberOfSteps` time steps. The time step</span></td></tr><tr><th id="L457"><a href="#L457">457</a></th><td><span class="sd">is calculated with the CFL number and the maximum extension velocity.</span></td></tr><tr><th id="L458"><a href="#L458">458</a></th><td><span class="sd"></span></td></tr><tr><th id="L459"><a href="#L459">459</a></th><td><span class="sd">.. raw:: latex</span></td></tr><tr><th id="L460"><a href="#L460">460</a></th><td><span class="sd"></span></td></tr><tr><th id="L461"><a href="#L461">461</a></th><td><span class="sd">    $v$ to</span></td></tr><tr><th id="L462"><a href="#L462">462</a></th><td><span class="sd">    $v_\text{ext}$ throughout the whole domain using</span></td></tr><tr><th id="L463"><a href="#L463">463</a></th><td><span class="sd">    $\nabla\phi\cdot\nabla v_\text{ext} = 0$.</span></td></tr><tr><th id="L464"><a href="#L464">464</a></th><td><span class="sd"></span></td></tr><tr><th id="L465"><a href="#L465">465</a></th><td><span class="sd">..</span></td></tr><tr><th id="L466"><a href="#L466">466</a></th><td><span class="sd"></span></td></tr><tr><th id="L467"><a href="#L467">467</a></th><td><span class="sd">   &gt;&gt;&gt; for step in range(numberOfSteps):</span></td></tr><tr><th id="L468"><a href="#L468">468</a></th><td><span class="sd">   ...</span></td></tr><tr><th id="L469"><a href="#L469">469</a></th><td><span class="sd">   ...     for viewer in viewers:</span></td></tr><tr><th id="L470"><a href="#L470">470</a></th><td><span class="sd">   ...         viewer.plot()</span></td></tr><tr><th id="L471"><a href="#L471">471</a></th><td><span class="sd">   ...</span></td></tr><tr><th id="L472"><a href="#L472">472</a></th><td><span class="sd">   ...     if step % levelSetUpdateFrequency == 0:</span></td></tr><tr><th id="L473"><a href="#L473">473</a></th><td><span class="sd">   ...         distanceVar.calcDistanceFunction()</span></td></tr><tr><th id="L474"><a href="#L474">474</a></th><td><span class="sd">   ...</span></td></tr><tr><th id="L475"><a href="#L475">475</a></th><td><span class="sd">   ...     extensionVelocityVariable.setValue(depositionRateVariable())</span></td></tr><tr><th id="L476"><a href="#L476">476</a></th><td><span class="sd">   ...</span></td></tr><tr><th id="L477"><a href="#L477">477</a></th><td><span class="sd">   ...     distanceVar.updateOld()</span></td></tr><tr><th id="L478"><a href="#L478">478</a></th><td><span class="sd">   ...     catalystVar.updateOld()</span></td></tr><tr><th id="L479"><a href="#L479">479</a></th><td><span class="sd">   ...     metalVar.updateOld()</span></td></tr><tr><th id="L480"><a href="#L480">480</a></th><td><span class="sd">   ...     bulkCatalystVar.updateOld()</span></td></tr><tr><th id="L481"><a href="#L481">481</a></th><td><span class="sd">   ...     distanceVar.extendVariable(extensionVelocityVariable)</span></td></tr><tr><th id="L482"><a href="#L482">482</a></th><td><span class="sd">   ...     dt = cflNumber * cellSize / max(extensionVelocityVariable)</span></td></tr><tr><th id="L483"><a href="#L483">483</a></th><td><span class="sd">   ...     advectionEquation.solve(distanceVar, dt=dt)</span></td></tr><tr><th id="L484"><a href="#L484">484</a></th><td><span class="sd">   ...     surfactantEquation.solve(catalystVar, dt=dt)</span></td></tr><tr><th id="L485"><a href="#L485">485</a></th><td><span class="sd">   ...     metalEquation.solve(var=metalVar, dt=dt,</span></td></tr><tr><th id="L486"><a href="#L486">486</a></th><td><span class="sd">   ...                         boundaryConditions=metalEquationBCs)</span></td></tr><tr><th id="L487"><a href="#L487">487</a></th><td><span class="sd">   ...     bulkCatalystEquation.solve(var=bulkCatalystVar, dt=dt,</span></td></tr><tr><th id="L488"><a href="#L488">488</a></th><td><span class="sd">   ...                                   boundaryConditions=catalystBCs)</span></td></tr><tr><th id="L489"><a href="#L489">489</a></th><td><span class="sd"></span></td></tr><tr><th id="L490"><a href="#L490">490</a></th><td><span class="sd">The following is a short test case. It uses saved data from a</span></td></tr><tr><th id="L491"><a href="#L491">491</a></th><td><span class="sd">simulation with 5 time steps. It is not a test for accuracy but a way</span></td></tr><tr><th id="L492"><a href="#L492">492</a></th><td><span class="sd">to tell if something has changed or been broken.</span></td></tr><tr><th id="L493"><a href="#L493">493</a></th><td><span class="sd"></span></td></tr><tr><th id="L494"><a href="#L494">494</a></th><td><span class="sd">   &gt;&gt;&gt; import os</span></td></tr><tr><th id="L495"><a href="#L495">495</a></th><td><span class="sd">   &gt;&gt;&gt; import examples.levelSet.electroChem</span></td></tr><tr><th id="L496"><a href="#L496">496</a></th><td><span class="sd">   &gt;&gt;&gt; filepath = os.path.join(examples.levelSet.electroChem.__path__[0], </span></td></tr><tr><th id="L497"><a href="#L497">497</a></th><td><span class="sd">   ...                         'test.gz')</span></td></tr><tr><th id="L498"><a href="#L498">498</a></th><td><span class="sd">   &gt;&gt;&gt; from fipy.tools import dump</span></td></tr><tr><th id="L499"><a href="#L499">499</a></th><td><span class="sd">   &gt;&gt;&gt; print catalystVar.allclose(dump.read(filepath), rtol=1e-4)</span></td></tr><tr><th id="L500"><a href="#L500">500</a></th><td><span class="sd">   1</span></td></tr><tr><th id="L501"><a href="#L501">501</a></th><td><span class="sd"></span></td></tr><tr><th id="L502"><a href="#L502">502</a></th><td><span class="sd">   &gt;&gt;&gt; if __name__ == '__main__':</span></td></tr><tr><th id="L503"><a href="#L503">503</a></th><td><span class="sd">   ...     raw_input('finished')</span></td></tr><tr><th id="L504"><a href="#L504">504</a></th><td><span class="sd"></span></td></tr><tr><th id="L505"><a href="#L505">505</a></th><td><span class="sd">"""</span></td></tr><tr><th id="L506"><a href="#L506">506</a></th><td></td></tr><tr><th id="L507"><a href="#L507">507</a></th><td>__docformat__ <span class="o">=</span> <span class="s">'restructuredtext'</span></td></tr><tr><th id="L508"><a href="#L508">508</a></th><td></td></tr><tr><th id="L509"><a href="#L509">509</a></th><td><span class="kn">from</span> <span class="nn">fipy</span> <span class="kn">import</span> __version__</td></tr><tr><th id="L510"><a href="#L510">510</a></th><td><span class="k">print</span> <span class="s">'fipy version'</span><span class="p">,</span>__version__</td></tr><tr><th id="L511"><a href="#L511">511</a></th><td></td></tr><tr><th id="L512"><a href="#L512">512</a></th><td><span class="kn">from</span> <span class="nn">fipy</span> <span class="kn">import</span> <span class="o">*</span></td></tr><tr><th id="L513"><a href="#L513">513</a></th><td></td></tr><tr><th id="L514"><a href="#L514">514</a></th><td><span class="c">##units</span></td></tr><tr><th id="L515"><a href="#L515">515</a></th><td>mum <span class="o">=</span> <span class="mf">1e-6</span></td></tr><tr><th id="L516"><a href="#L516">516</a></th><td>cm <span class="o">=</span> <span class="mf">1e-2</span></td></tr><tr><th id="L517"><a href="#L517">517</a></th><td>mol <span class="o">=</span> <span class="mf">1.</span></td></tr><tr><th id="L518"><a href="#L518">518</a></th><td>s <span class="o">=</span> <span class="mf">1.</span></td></tr><tr><th id="L519"><a href="#L519">519</a></th><td>nm <span class="o">=</span> <span class="mf">1e-9</span></td></tr><tr><th id="L520"><a href="#L520">520</a></th><td></td></tr><tr><th id="L521"><a href="#L521">521</a></th><td><span class="c">## build the mesh</span></td></tr><tr><th id="L522"><a href="#L522">522</a></th><td>trenchDepth <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> mum</td></tr><tr><th id="L523"><a href="#L523">523</a></th><td>trenchWidth <span class="o">=</span> <span class="mf">0.5</span> <span class="o">*</span> mum</td></tr><tr><th id="L524"><a href="#L524">524</a></th><td>trenchSpacing <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> mum</td></tr><tr><th id="L525"><a href="#L525">525</a></th><td>boundaryLayerDepth <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> mum</td></tr><tr><th id="L526"><a href="#L526">526</a></th><td>spaceBelowTrench <span class="o">=</span> <span class="mf">0.1</span> <span class="o">*</span> trenchDepth</td></tr><tr><th id="L527"><a href="#L527">527</a></th><td>cellSize <span class="o">=</span> trenchWidth <span class="o">/</span> <span class="mi">20</span></td></tr><tr><th id="L528"><a href="#L528">528</a></th><td>ny <span class="o">=</span> <span class="nb">int</span><span class="p">((</span>spaceBelowTrench <span class="o">+</span> trenchDepth <span class="o">+</span> boundaryLayerDepth<span class="p">)</span> <span class="o">/</span> cellSize<span class="p">)</span></td></tr><tr><th id="L529"><a href="#L529">529</a></th><td>nx <span class="o">=</span> <span class="nb">int</span><span class="p">(</span>trenchSpacing <span class="o">/</span> cellSize <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> </td></tr><tr><th id="L530"><a href="#L530">530</a></th><td>mesh <span class="o">=</span> Grid2D<span class="p">(</span>dx<span class="o">=</span>cellSize<span class="p">,</span> dy<span class="o">=</span>cellSize<span class="p">,</span> nx<span class="o">=</span>nx<span class="p">,</span> ny<span class="o">=</span>ny<span class="p">)</span></td></tr><tr><th id="L531"><a href="#L531">531</a></th><td></td></tr><tr><th id="L532"><a href="#L532">532</a></th><td><span class="c">## build the distance function</span></td></tr><tr><th id="L533"><a href="#L533">533</a></th><td>cellsInBand <span class="o">=</span> <span class="mi">10</span></td></tr><tr><th id="L534"><a href="#L534">534</a></th><td>bandWidth <span class="o">=</span> cellsInBand <span class="o">*</span> cellSize</td></tr><tr><th id="L535"><a href="#L535">535</a></th><td>distanceVar <span class="o">=</span> DistanceVariable<span class="p">(</span>mesh<span class="o">=</span>mesh<span class="p">,</span></td></tr><tr><th id="L536"><a href="#L536">536</a></th><td>                       value<span class="o">=-</span><span class="mi">1</span><span class="p">,</span></td></tr><tr><th id="L537"><a href="#L537">537</a></th><td>                       narrowBandWidth<span class="o">=</span>bandWidth<span class="p">,</span></td></tr><tr><th id="L538"><a href="#L538">538</a></th><td>                       hasOld<span class="o">=</span><span class="mi">1</span><span class="p">)</span></td></tr><tr><th id="L539"><a href="#L539">539</a></th><td>X <span class="o">=</span> mesh<span class="o">.</span>getCellCenters<span class="p">()</span></td></tr><tr><th id="L540"><a href="#L540">540</a></th><td>x<span class="p">,</span> y <span class="o">=</span> X<span class="p">[</span><span class="o">...</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> X<span class="p">[</span><span class="o">...</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span></td></tr><tr><th id="L541"><a href="#L541">541</a></th><td>distanceVar<span class="o">.</span>setValue<span class="p">(</span><span class="mi">1</span><span class="p">,</span> where<span class="o">=</span>y <span class="o">&gt;</span> <span class="p">(</span>trenchDepth <span class="o">+</span> spaceBelowTrench<span class="p">))</span></td></tr><tr><th id="L542"><a href="#L542">542</a></th><td>distanceVar<span class="o">.</span>setValue<span class="p">(</span><span class="mi">1</span><span class="p">,</span> where<span class="o">=</span><span class="p">(</span>y <span class="o">&gt;</span> spaceBelowTrench<span class="p">)</span> <span class="o">&amp;</span></td></tr><tr><th id="L543"><a href="#L543">543</a></th><td>                      <span class="p">(</span>x <span class="o">&lt;</span> trenchWidth <span class="o">/</span> <span class="mf">2.0</span><span class="p">))</span></td></tr><tr><th id="L544"><a href="#L544">544</a></th><td></td></tr><tr><th id="L545"><a href="#L545">545</a></th><td><span class="k">print</span> <span class="s">'nx * cellSize'</span><span class="p">,</span>nx <span class="o">*</span> cellSize</td></tr><tr><th id="L546"><a href="#L546">546</a></th><td><span class="k">print</span> <span class="s">'trenchWidth/2.0'</span><span class="p">,</span>trenchWidth <span class="o">/</span> <span class="mf">2.0</span></td></tr><tr><th id="L547"><a href="#L547">547</a></th><td><span class="nb">raw_input</span><span class="p">(</span><span class="s">"stopped"</span><span class="p">)</span></td></tr><tr><th id="L548"><a href="#L548">548</a></th><td></td></tr><tr><th id="L549"><a href="#L549">549</a></th><td><span class="c">##                      (x &lt; (trenchSpacing + trenchWidth) / 2.0))</span></td></tr><tr><th id="L550"><a href="#L550">550</a></th><td>distanceVar<span class="o">.</span>calcDistanceFunction<span class="p">(</span>narrowBandWidth<span class="o">=</span><span class="mf">1e10</span><span class="p">)</span></td></tr><tr><th id="L551"><a href="#L551">551</a></th><td></td></tr><tr><th id="L552"><a href="#L552">552</a></th><td><span class="c">## build the surfactant variable</span></td></tr><tr><th id="L553"><a href="#L553">553</a></th><td>catalystVar <span class="o">=</span> SurfactantVariable<span class="p">(</span>value<span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> distanceVar<span class="o">=</span>distanceVar<span class="p">)</span></td></tr><tr><th id="L554"><a href="#L554">554</a></th><td></td></tr><tr><th id="L555"><a href="#L555">555</a></th><td><span class="c">## build the ion variable</span></td></tr><tr><th id="L556"><a href="#L556">556</a></th><td>ionConcentration <span class="o">=</span> <span class="mf">0.00025</span> <span class="o">*</span> mol<span class="o">/</span>cm<span class="o">**</span><span class="mi">3</span></td></tr><tr><th id="L557"><a href="#L557">557</a></th><td>ionVar <span class="o">=</span> CellVariable<span class="p">(</span>mesh<span class="o">=</span>mesh<span class="p">,</span> value<span class="o">=</span>ionConcentration <span class="p">)</span></td></tr><tr><th id="L558"><a href="#L558">558</a></th><td></td></tr><tr><th id="L559"><a href="#L559">559</a></th><td><span class="c">## build the velocity</span></td></tr><tr><th id="L560"><a href="#L560">560</a></th><td></td></tr><tr><th id="L561"><a href="#L561">561</a></th><td>velocity <span class="o">=</span> ionVar <span class="o">/</span> ionConcentration <span class="o">*</span> \</td></tr><tr><th id="L562"><a href="#L562">562</a></th><td>              <span class="p">(</span> <span class="mf">3.21</span> <span class="o">*</span> nm<span class="o">/</span>s <span class="o">+</span> <span class="mf">660.0</span> <span class="o">*</span> nm<span class="o">/</span>s <span class="o">*</span> catalystVar<span class="o">.</span>getInterfaceVar<span class="p">())</span></td></tr><tr><th id="L563"><a href="#L563">563</a></th><td>extVelocityVar <span class="o">=</span> CellVariable<span class="p">(</span>mesh<span class="o">=</span>mesh<span class="p">)</span></td></tr><tr><th id="L564"><a href="#L564">564</a></th><td></td></tr><tr><th id="L565"><a href="#L565">565</a></th><td>surfactantEquation <span class="o">=</span> SurfactantEquation<span class="p">(</span>distanceVar<span class="o">=</span>distanceVar<span class="p">)</span></td></tr><tr><th id="L566"><a href="#L566">566</a></th><td></td></tr><tr><th id="L567"><a href="#L567">567</a></th><td><span class="c">## build the advection equation</span></td></tr><tr><th id="L568"><a href="#L568">568</a></th><td>advectionEquation <span class="o">=</span> buildHigherOrderAdvectionEquation<span class="p">(</span></td></tr><tr><th id="L569"><a href="#L569">569</a></th><td>    advectionCoeff<span class="o">=</span>extVelocityVar<span class="p">)</span></td></tr><tr><th id="L570"><a href="#L570">570</a></th><td></td></tr><tr><th id="L571"><a href="#L571">571</a></th><td><span class="c">## create the ion diffusion equation</span></td></tr><tr><th id="L572"><a href="#L572">572</a></th><td>metalEquation <span class="o">=</span> buildMetalIonDiffusionEquation<span class="p">(</span></td></tr><tr><th id="L573"><a href="#L573">573</a></th><td>    ionVar<span class="o">=</span>ionVar<span class="p">,</span></td></tr><tr><th id="L574"><a href="#L574">574</a></th><td>    distanceVar<span class="o">=</span>distanceVar<span class="p">,</span></td></tr><tr><th id="L575"><a href="#L575">575</a></th><td>    depositionRate<span class="o">=</span>velocity<span class="p">,</span></td></tr><tr><th id="L576"><a href="#L576">576</a></th><td>    diffusionCoeff<span class="o">=</span><span class="mf">5.6e-6</span> <span class="o">*</span> cm<span class="o">**</span><span class="mi">2</span><span class="o">/</span>s<span class="p">,</span></td></tr><tr><th id="L577"><a href="#L577">577</a></th><td>    metalIonMolarVolume<span class="o">=</span><span class="mf">7.1</span> <span class="o">*</span> cm<span class="o">**</span><span class="mi">3</span><span class="o">/</span>mol<span class="p">)</span></td></tr><tr><th id="L578"><a href="#L578">578</a></th><td>metalEquationBCs <span class="o">=</span> FixedValue<span class="p">(</span>faces<span class="o">=</span>mesh<span class="o">.</span>getFacesTop<span class="p">(),</span> value<span class="o">=</span>ionConcentration<span class="p">)</span></td></tr><tr><th id="L579"><a href="#L579">579</a></th><td></td></tr><tr><th id="L580"><a href="#L580">580</a></th><td>viewer <span class="o">=</span> MayaviSurfactantViewer<span class="p">(</span>distanceVar<span class="p">,</span></td></tr><tr><th id="L581"><a href="#L581">581</a></th><td>                                catalystVar<span class="o">.</span>getInterfaceVar<span class="p">(),</span></td></tr><tr><th id="L582"><a href="#L582">582</a></th><td>                                zoomFactor<span class="o">=</span><span class="mi">1</span> <span class="o">/</span> mum<span class="p">,</span></td></tr><tr><th id="L583"><a href="#L583">583</a></th><td>                                limits<span class="o">=</span><span class="p">{</span> <span class="s">'datamax'</span> <span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="s">'datamin'</span> <span class="p">:</span> <span class="mf">0.0</span> <span class="p">},</span></td></tr><tr><th id="L584"><a href="#L584">584</a></th><td>                                smooth<span class="o">=</span><span class="mi">1</span><span class="p">)</span></td></tr><tr><th id="L585"><a href="#L585">585</a></th><td></td></tr><tr><th id="L586"><a href="#L586">586</a></th><td>CFL <span class="o">=</span> <span class="mf">0.2</span></td></tr><tr><th id="L587"><a href="#L587">587</a></th><td>updateFrequency <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">0.8</span> <span class="o">*</span> bandWidth <span class="o">/</span> <span class="p">(</span>cellSize <span class="o">*</span> CFL <span class="o">*</span> <span class="mi">2</span><span class="p">))</span></td></tr><tr><th id="L588"><a href="#L588">588</a></th><td></td></tr><tr><th id="L589"><a href="#L589">589</a></th><td><span class="k">for</span> step <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span></td></tr><tr><th id="L590"><a href="#L590">590</a></th><td>    <span class="k">if</span> step <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span></td></tr><tr><th id="L591"><a href="#L591">591</a></th><td>        viewer<span class="o">.</span>plot<span class="p">()</span></td></tr><tr><th id="L592"><a href="#L592">592</a></th><td></td></tr><tr><th id="L593"><a href="#L593">593</a></th><td>    <span class="k">if</span> step <span class="o">%</span> updateFrequency <span class="o">==</span> <span class="mi">0</span><span class="p">:</span></td></tr><tr><th id="L594"><a href="#L594">594</a></th><td>        distanceVar<span class="o">.</span>calcDistanceFunction<span class="p">()</span></td></tr><tr><th id="L595"><a href="#L595">595</a></th><td></td></tr><tr><th id="L596"><a href="#L596">596</a></th><td>    extVelocityVar<span class="o">.</span>setValue<span class="p">(</span>velocity<span class="p">)</span></td></tr><tr><th id="L597"><a href="#L597">597</a></th><td></td></tr><tr><th id="L598"><a href="#L598">598</a></th><td>    distanceVar<span class="o">.</span>updateOld<span class="p">()</span></td></tr><tr><th id="L599"><a href="#L599">599</a></th><td>    catalystVar<span class="o">.</span>updateOld<span class="p">()</span></td></tr><tr><th id="L600"><a href="#L600">600</a></th><td>    ionVar<span class="o">.</span>updateOld<span class="p">()</span></td></tr><tr><th id="L601"><a href="#L601">601</a></th><td></td></tr><tr><th id="L602"><a href="#L602">602</a></th><td>    distanceVar<span class="o">.</span>extendVariable<span class="p">(</span>extVelocityVar<span class="p">)</span></td></tr><tr><th id="L603"><a href="#L603">603</a></th><td>    dt <span class="o">=</span> CFL <span class="o">*</span> cellSize <span class="o">/</span> <span class="nb">max</span><span class="p">(</span>extVelocityVar<span class="p">)</span></td></tr><tr><th id="L604"><a href="#L604">604</a></th><td></td></tr><tr><th id="L605"><a href="#L605">605</a></th><td>    advectionEquation<span class="o">.</span>solve<span class="p">(</span>distanceVar<span class="p">,</span> dt<span class="o">=</span>dt<span class="p">)</span></td></tr><tr><th id="L606"><a href="#L606">606</a></th><td>    surfactantEquation<span class="o">.</span>solve<span class="p">(</span>catalystVar<span class="p">,</span> dt<span class="o">=</span>dt<span class="p">)</span></td></tr><tr><th id="L607"><a href="#L607">607</a></th><td>    metalEquation<span class="o">.</span>solve<span class="p">(</span>ionVar<span class="p">,</span> dt<span class="o">=</span>dt<span class="p">,</span></td></tr><tr><th id="L608"><a href="#L608">608</a></th><td>                        boundaryConditions<span class="o">=</span>metalEquationBCs<span class="p">)</span></td></tr><tr><th id="L609"><a href="#L609">609</a></th><td></td></tr><tr><th id="L610"><a href="#L610">610</a></th><td>    </td></tr><tr><th id="L611"><a href="#L611">611</a></th><td><span class="c">##__docformat__ = 'restructuredtext'</span></td></tr><tr><th id="L612"><a href="#L612">612</a></th><td></td></tr><tr><th id="L613"><a href="#L613">613</a></th><td><span class="c">##def _run():</span></td></tr><tr><th id="L614"><a href="#L614">614</a></th><td><span class="c">##    import fipy.tests.doctestPlus</span></td></tr><tr><th id="L615"><a href="#L615">615</a></th><td><span class="c">##    exec(fipy.tests.doctestPlus._getScript(__name__))</span></td></tr><tr><th id="L616"><a href="#L616">616</a></th><td>    </td></tr><tr><th id="L617"><a href="#L617">617</a></th><td><span class="c">##if __name__ == '__main__':</span></td></tr><tr><th id="L618"><a href="#L618">618</a></th><td><span class="c">##    _run()</span></td></tr><tr><th id="L619"><a href="#L619">619</a></th><td></td></tr><tr><th id="L620"><a href="#L620">620</a></th><td></td></tr></tbody></table>

        </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/fipy/raw-attachment/ticket/104/example1.py">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en">
            <div id="projfooter"><!-- Project specific footer start -->
                <script type="text/javascript"> if (window.runOnloadHook) runOnloadHook();</script>
                <script type="text/javascript">
                    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
                    document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
                </script>
                <script type="text/javascript">
                    var pageTracker = _gat._getTracker("UA-2981268-9");
                    pageTracker._initData();
                    pageTracker._trackPageview();
                </script>
            </div><!-- Project specific footer end -->
            <div id="footer_banner">
                <img src="/trac_1.0_htdocs//footer.gif" width="840" height="45" border="0" usemap="#footer" />
                <map name="footer" id="footer">
                    <area shape="rect" coords="2,3,133,42" href="http://www.kent.edu" target="_blank" alt="Kent State University" />
                    <area shape="rect" coords="137,3,240,41" href="http://www.nist.gov" target="_blank" alt="NIST" />
                    <area shape="rect" coords="244,3,372,39" href="http://www.mit.edu" target="_blank" alt="MIT" />
                    <area shape="rect" coords="376,5,606,41" href="http://www.umich.edu" target="_blank" alt="University of Michigan" />
                    <area shape="rect" coords="613,5,715,38" href="http://www.purdue.edu" target="_blank" alt="Purdue" />
                    <area shape="rect" coords="718,4,833,41" href="http://www.iastate.edu" target="_blank" alt="Iowa State University" />
                </map>
            </div>
            <br />
            <div id="altlinks">
                <br />
                <ul>
                    <li><a href="http://matdl.org/repository/about.htm" class="last first"> About </a></li>
                    <li><a href="http://matdl.org/repository/tou.htm" class="last first"> Terms of Use </a></li>
                    <li><a href="http://matdl.org/repository/contact.htm" class="last first"> Contact </a></li>
                    <li><a href="http://matdl.org/repository/priv.htm" class="last first"> Privacy Policy </a></li>
                </ul>
            </div>
	    <div id="tracfooter" lang="en" xml:lang="en">
	    <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/fipy/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
	    <p class="left">
	    Powered by <a href="/fipy/about"><strong>Trac 1.0</strong></a><br />
	    By <a href="http://www.edgewall.org/">Edgewall Software</a>.
	    </p>
	    <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
	    </div>
        </div>
    </body>
</html>