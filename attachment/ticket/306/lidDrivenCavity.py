<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  
    



    <head>
    <title>
      lidDrivenCavity.py on Ticket #306 – Attachment
     – FiPy
    </title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/fipy/search" />
        <link rel="help" href="/fipy/wiki/TracGuide" />
        <link rel="alternate" href="/fipy/raw-attachment/ticket/306/lidDrivenCavity.py" type="application/x-python; charset=iso-8859-15" title="Original Format" />
        <link rel="up" href="/fipy/ticket/306" title="Ticket #306" />
        <link rel="start" href="/fipy/wiki" />
        <link rel="stylesheet" href="/trac_1.0_htdocs/css/trac.css" type="text/css" /><link rel="stylesheet" href="/fipy/pygments/trac.css" type="text/css" /><link rel="stylesheet" href="/trac_1.0_htdocs/css/code.css" type="text/css" />
        <link rel="shortcut icon" href="/fipy/chrome/common/trac.ico" type="image/x-icon" />
        <link rel="icon" href="/fipy/chrome/common/trac.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/fipy/search/opensearch" title="Search FiPy" />
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/jquery.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/babel.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/trac.js"></script>
      <script type="text/javascript" charset="utf-8" src="/trac_1.0_htdocs/js/search.js"></script>
      <script type="text/javascript" src="/trac_1.0_htdocs/js/folding.js"></script>
      <script type="text/javascript">
        jQuery(document).ready(function($) {
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
        });
      </script>
        <link rel="stylesheet" type="text/css" href="/trac_1.0_htdocs//css/matdlosi.css" />
	<style type="text/css">
	body {width: 95%;}
	</style>
    </head>
    <body>
    <div id="banner">
      <div id="header">
            <div id="topLogo">
                <img src="/trac_1.0_htdocs//hdr_main.jpg" alt="Main Header" usemap="#MatDL_Banner_Narrow_Map" />
                <map name="MatDL_Banner_Narrow_Map">
                    <area shape="rect" alt="Materials Digital Library" coords="44,53,263,70" href="http://matdl.org" />
                    <area shape="rect" alt="NSDL logo" coords="675,43,740,71" href="http://nsdl.org" />
                    <area shape="rect" alt="NSF logo" coords="686,0,731,43" href="http://nsf.gov" />
                    <area shape="rect" alt="MatDL logo" coords="44,0,158,53" href="http://matdl.org" />
                </map>
                <br />
                <br />
            </div>
            <div id="projheader">
                <h1 style="margin: 0px;">
                    <img style="width: 50px;" src="/fipy/chrome/site/fipy-logo.png" alt="FiPy" />
                FiPy: A Finite Volume PDE Solver Using Python</h1>
                <a href="http://www.ctcms.nist.gov/fipy">FiPy Home</a>
            </div>
        </div>
      <form id="search" action="/fipy/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/fipy/login">Login</a></li><li><a href="/fipy/wiki/TracGuide">Help/Guide</a></li><li><a href="/fipy/about">About Trac</a></li><li><a href="http://matforge.org">Matforge Home</a></li><li><a href="/fipy/register">Register</a></li><li><a href="http://matforge.org/participate.html">Participate</a></li><li class="last"><a href="/fipy/prefs">Preferences</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/fipy/wiki">Wiki</a></li><li><a href="/fipy/blog">Blog</a></li><li><a href="/fipy/timeline">Timeline</a></li><li><a href="/fipy/roadmap">Roadmap</a></li><li><a href="/fipy/browser">Browse Source</a></li><li><a href="/fipy/report">View Tickets</a></li><li><a href="http://build.cmi.kent.edu:8010/waterfall">Buildbot</a></li><li class="last"><a href="http://build.cmi.kent.edu/codespeed">Codespeed</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
        <ul>
          <li class="last first"><a href="/fipy/ticket/306">Back to Ticket #306</a></li>
        </ul>
        <hr />
      </div>
    <div id="content" class="attachment">
        <h1><a href="/fipy/ticket/306">Ticket #306</a>: lidDrivenCavity.py</h1>
        <table id="info" summary="Description">
          <tbody>
            <tr>
              <th scope="col">File lidDrivenCavity.py,
                <span title="13394 bytes">13.1 KB</span>
                (added by benny.malengier@…, <a class="timeline" href="/fipy/timeline?from=2010-07-19T05%3A40%3A15-04%3A00&amp;precision=second" title="See timeline at 07/19/10 05:40:15">4 years ago</a>)</th>
            </tr>
            <tr>
              <td class="message searchable">
                
              </td>
            </tr>
          </tbody>
        </table>
        <div id="preview" class="searchable">
          
  <table class="code"><thead><tr><th class="lineno" title="Line numbers">Line</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td><span class="c">#!/usr/bin/env python</span></td></tr><tr><th id="L2"><a href="#L2">2</a></th><td></td></tr><tr><th id="L3"><a href="#L3">3</a></th><td><span class="c">## </span></td></tr><tr><th id="L4"><a href="#L4">4</a></th><td> <span class="c"># ###################################################################</span></td></tr><tr><th id="L5"><a href="#L5">5</a></th><td> <span class="c">#  FiPy - Python-based finite volume PDE solver</span></td></tr><tr><th id="L6"><a href="#L6">6</a></th><td> <span class="c"># </span></td></tr><tr><th id="L7"><a href="#L7">7</a></th><td> <span class="c">#  FILE: "lidDrivenCavity.py"</span></td></tr><tr><th id="L8"><a href="#L8">8</a></th><td> <span class="c">#</span></td></tr><tr><th id="L9"><a href="#L9">9</a></th><td> <span class="c">#  Author: Jonathan Guyer &lt;guyer@nist.gov&gt;</span></td></tr><tr><th id="L10"><a href="#L10">10</a></th><td> <span class="c">#  Author: Daniel Wheeler &lt;daniel.wheeler@nist.gov&gt;</span></td></tr><tr><th id="L11"><a href="#L11">11</a></th><td> <span class="c">#  Author: Benny Malengier &lt;bm@cage.ugent.be&gt;</span></td></tr><tr><th id="L12"><a href="#L12">12</a></th><td> <span class="c">#    mail: NIST</span></td></tr><tr><th id="L13"><a href="#L13">13</a></th><td> <span class="c">#     www: http://ctcms.nist.gov</span></td></tr><tr><th id="L14"><a href="#L14">14</a></th><td> <span class="c">#  </span></td></tr><tr><th id="L15"><a href="#L15">15</a></th><td> <span class="c"># ========================================================================</span></td></tr><tr><th id="L16"><a href="#L16">16</a></th><td> <span class="c"># This software was developed at the National Institute of Standards</span></td></tr><tr><th id="L17"><a href="#L17">17</a></th><td> <span class="c"># and Technology by employees of the Federal Government in the course</span></td></tr><tr><th id="L18"><a href="#L18">18</a></th><td> <span class="c"># of their official duties.  Pursuant to title 17 Section 105 of the</span></td></tr><tr><th id="L19"><a href="#L19">19</a></th><td> <span class="c"># United States Code this software is not subject to copyright</span></td></tr><tr><th id="L20"><a href="#L20">20</a></th><td> <span class="c"># protection and is in the public domain.  FiPy is an experimental</span></td></tr><tr><th id="L21"><a href="#L21">21</a></th><td> <span class="c"># system.  NIST assumes no responsibility whatsoever for its use by</span></td></tr><tr><th id="L22"><a href="#L22">22</a></th><td> <span class="c"># other parties, and makes no guarantees, expressed or implied, about</span></td></tr><tr><th id="L23"><a href="#L23">23</a></th><td> <span class="c"># its quality, reliability, or any other characteristic.  We would</span></td></tr><tr><th id="L24"><a href="#L24">24</a></th><td> <span class="c"># appreciate acknowledgement if the software is used.</span></td></tr><tr><th id="L25"><a href="#L25">25</a></th><td> <span class="c"># </span></td></tr><tr><th id="L26"><a href="#L26">26</a></th><td> <span class="c"># This software can be redistributed and/or modified freely</span></td></tr><tr><th id="L27"><a href="#L27">27</a></th><td> <span class="c"># provided that any derivative works bear some notice that they are</span></td></tr><tr><th id="L28"><a href="#L28">28</a></th><td> <span class="c"># derived from it, and any modified versions bear some notice that</span></td></tr><tr><th id="L29"><a href="#L29">29</a></th><td> <span class="c"># they have been modified.</span></td></tr><tr><th id="L30"><a href="#L30">30</a></th><td> <span class="c"># ========================================================================</span></td></tr><tr><th id="L31"><a href="#L31">31</a></th><td> <span class="c">#  </span></td></tr><tr><th id="L32"><a href="#L32">32</a></th><td> <span class="c"># ###################################################################</span></td></tr><tr><th id="L33"><a href="#L33">33</a></th><td> <span class="c">##</span></td></tr><tr><th id="L34"><a href="#L34">34</a></th><td></td></tr><tr><th id="L35"><a href="#L35">35</a></th><td><span class="sd">r"""</span></td></tr><tr><th id="L36"><a href="#L36">36</a></th><td><span class="sd"></span></td></tr><tr><th id="L37"><a href="#L37">37</a></th><td><span class="sd">This example is an implementation of the well known lid driven cavity problem</span></td></tr><tr><th id="L38"><a href="#L38">38</a></th><td><span class="sd">at Re=1000, with comparison to the results in the literature. </span></td></tr><tr><th id="L39"><a href="#L39">39</a></th><td><span class="sd">For this, the Navier-Stokes equations are solved on a colocated grid. </span></td></tr><tr><th id="L40"><a href="#L40">40</a></th><td><span class="sd"></span></td></tr><tr><th id="L41"><a href="#L41">41</a></th><td><span class="sd">This example is an extension of :mod:`examples.flow.stokesCavity` where the</span></td></tr><tr><th id="L42"><a href="#L42">42</a></th><td><span class="sd">viscous limit of this problem is considered. See that example for an </span></td></tr><tr><th id="L43"><a href="#L43">43</a></th><td><span class="sd">explenation on the SIMPLE algorithm.</span></td></tr><tr><th id="L44"><a href="#L44">44</a></th><td><span class="sd"></span></td></tr><tr><th id="L45"><a href="#L45">45</a></th><td><span class="sd">The equation that is solved is </span></td></tr><tr><th id="L46"><a href="#L46">46</a></th><td><span class="sd"></span></td></tr><tr><th id="L47"><a href="#L47">47</a></th><td><span class="sd">.. math::</span></td></tr><tr><th id="L48"><a href="#L48">48</a></th><td><span class="sd"></span></td></tr><tr><th id="L49"><a href="#L49">49</a></th><td><span class="sd">   \vec{u} \cdot \nabla \vec{u} - \nabla \mu \cdot \nabla \vec{u} = -\nabla p</span></td></tr><tr><th id="L50"><a href="#L50">50</a></th><td><span class="sd">   </span></td></tr><tr><th id="L51"><a href="#L51">51</a></th><td><span class="sd">and the continuity equation,</span></td></tr><tr><th id="L52"><a href="#L52">52</a></th><td><span class="sd"></span></td></tr><tr><th id="L53"><a href="#L53">53</a></th><td><span class="sd">.. math::</span></td></tr><tr><th id="L54"><a href="#L54">54</a></th><td><span class="sd">    </span></td></tr><tr><th id="L55"><a href="#L55">55</a></th><td><span class="sd">   \nabla \cdot \vec{u} = 0 </span></td></tr><tr><th id="L56"><a href="#L56">56</a></th><td><span class="sd">   </span></td></tr><tr><th id="L57"><a href="#L57">57</a></th><td><span class="sd">where :math:`\vec{u}` is the fluid velocity, :math:`p` is the pressure and :math:`\mu`</span></td></tr><tr><th id="L58"><a href="#L58">58</a></th><td><span class="sd">is the viscosity.  The domain in this example is a square cavity</span></td></tr><tr><th id="L59"><a href="#L59">59</a></th><td><span class="sd">of unit dimensions with a moving lid of unit speed.  This example</span></td></tr><tr><th id="L60"><a href="#L60">60</a></th><td><span class="sd">uses the SIMPLE algorithm with Rhie-Chow interpolation for colocated grids to solve</span></td></tr><tr><th id="L61"><a href="#L61">61</a></th><td><span class="sd">the pressure-momentum coupling, see also :mod:`examples.flow.stokesCavity`. </span></td></tr><tr><th id="L62"><a href="#L62">62</a></th><td><span class="sd">A number of aspects of :term:`FiPy` need to be improved to have a first class flow</span></td></tr><tr><th id="L63"><a href="#L63">63</a></th><td><span class="sd">solver. These include, higher order spatial diffusion terms,</span></td></tr><tr><th id="L64"><a href="#L64">64</a></th><td><span class="sd">proper wall boundary conditions, improved mass flux evaluation and</span></td></tr><tr><th id="L65"><a href="#L65">65</a></th><td><span class="sd">extrapolation of cell values to the boundaries using gradients.</span></td></tr><tr><th id="L66"><a href="#L66">66</a></th><td><span class="sd"></span></td></tr><tr><th id="L67"><a href="#L67">67</a></th><td><span class="sd">We compare the results with Ghia et al (1982), which is common in literature.</span></td></tr><tr><th id="L68"><a href="#L68">68</a></th><td><span class="sd">For an open source CFD solver that can solve the same problem, see Gerris_ , the values of Ghia et al where</span></td></tr><tr><th id="L69"><a href="#L69">69</a></th><td><span class="sd">taken from there </span></td></tr><tr><th id="L70"><a href="#L70">70</a></th><td><span class="sd"></span></td></tr><tr><th id="L71"><a href="#L71">71</a></th><td><span class="sd">.. _Gerris:    http://gfs.sourceforge.net/tests/tests/lid.html</span></td></tr><tr><th id="L72"><a href="#L72">72</a></th><td><span class="sd"></span></td></tr><tr><th id="L73"><a href="#L73">73</a></th><td><span class="sd">To start, some parameters are declared.</span></td></tr><tr><th id="L74"><a href="#L74">74</a></th><td><span class="sd"></span></td></tr><tr><th id="L75"><a href="#L75">75</a></th><td><span class="sd">&gt;&gt;&gt; from fipy import *</span></td></tr><tr><th id="L76"><a href="#L76">76</a></th><td><span class="sd"></span></td></tr><tr><th id="L77"><a href="#L77">77</a></th><td><span class="sd">&gt;&gt;&gt; L = 1.0</span></td></tr><tr><th id="L78"><a href="#L78">78</a></th><td><span class="sd">&gt;&gt;&gt; # number of cells, multiplicator of 3, not of 2, so 0.5 is a cell center!</span></td></tr><tr><th id="L79"><a href="#L79">79</a></th><td><span class="sd">&gt;&gt;&gt; N = 63</span></td></tr><tr><th id="L80"><a href="#L80">80</a></th><td><span class="sd">&gt;&gt;&gt; dL = L / N</span></td></tr><tr><th id="L81"><a href="#L81">81</a></th><td><span class="sd">&gt;&gt;&gt; viscosity = 1e-3</span></td></tr><tr><th id="L82"><a href="#L82">82</a></th><td><span class="sd">&gt;&gt;&gt; U = 1.</span></td></tr><tr><th id="L83"><a href="#L83">83</a></th><td><span class="sd">&gt;&gt;&gt; Reynolds = U*L/viscosity</span></td></tr><tr><th id="L84"><a href="#L84">84</a></th><td><span class="sd">&gt;&gt;&gt; #0.8 for pressure and 0.5 for velocity are typical relaxation values for SIMPLE</span></td></tr><tr><th id="L85"><a href="#L85">85</a></th><td><span class="sd">&gt;&gt;&gt; pressureRelaxation = 0.8</span></td></tr><tr><th id="L86"><a href="#L86">86</a></th><td><span class="sd">&gt;&gt;&gt; velocityRelaxation = 0.5</span></td></tr><tr><th id="L87"><a href="#L87">87</a></th><td><span class="sd">&gt;&gt;&gt; if __name__ == '__main__':</span></td></tr><tr><th id="L88"><a href="#L88">88</a></th><td><span class="sd">...     sweeps = 500</span></td></tr><tr><th id="L89"><a href="#L89">89</a></th><td><span class="sd">... else:</span></td></tr><tr><th id="L90"><a href="#L90">90</a></th><td><span class="sd">...     sweeps = 15</span></td></tr><tr><th id="L91"><a href="#L91">91</a></th><td><span class="sd"></span></td></tr><tr><th id="L92"><a href="#L92">92</a></th><td><span class="sd">Build the mesh.</span></td></tr><tr><th id="L93"><a href="#L93">93</a></th><td><span class="sd"></span></td></tr><tr><th id="L94"><a href="#L94">94</a></th><td><span class="sd">.. index:: Grid2D</span></td></tr><tr><th id="L95"><a href="#L95">95</a></th><td><span class="sd">   </span></td></tr><tr><th id="L96"><a href="#L96">96</a></th><td><span class="sd">&gt;&gt;&gt; mesh = Grid2D(nx=N, ny=N, dx=dL, dy=dL)</span></td></tr><tr><th id="L97"><a href="#L97">97</a></th><td><span class="sd"></span></td></tr><tr><th id="L98"><a href="#L98">98</a></th><td><span class="sd">Declare the variables.</span></td></tr><tr><th id="L99"><a href="#L99">99</a></th><td><span class="sd"></span></td></tr><tr><th id="L100"><a href="#L100">100</a></th><td><span class="sd">.. index:: CellVariable</span></td></tr><tr><th id="L101"><a href="#L101">101</a></th><td><span class="sd">   </span></td></tr><tr><th id="L102"><a href="#L102">102</a></th><td><span class="sd">&gt;&gt;&gt; pressure = CellVariable(mesh=mesh, name='pressure')</span></td></tr><tr><th id="L103"><a href="#L103">103</a></th><td><span class="sd">&gt;&gt;&gt; pressureCorrection = CellVariable(mesh=mesh)</span></td></tr><tr><th id="L104"><a href="#L104">104</a></th><td><span class="sd">&gt;&gt;&gt; xVelocity = CellVariable(mesh=mesh, name='X velocity')</span></td></tr><tr><th id="L105"><a href="#L105">105</a></th><td><span class="sd">&gt;&gt;&gt; yVelocity = CellVariable(mesh=mesh, name='Y velocity')</span></td></tr><tr><th id="L106"><a href="#L106">106</a></th><td><span class="sd"></span></td></tr><tr><th id="L107"><a href="#L107">107</a></th><td><span class="sd">The velocity is required as a rank-1</span></td></tr><tr><th id="L108"><a href="#L108">108</a></th><td><span class="sd">:class:`~fipy.variables.faceVariable.FaceVariable` for calculating the mass</span></td></tr><tr><th id="L109"><a href="#L109">109</a></th><td><span class="sd">flux. This is required by the Rhie-Chow correction to avoid pressure/velocity</span></td></tr><tr><th id="L110"><a href="#L110">110</a></th><td><span class="sd">decoupling.</span></td></tr><tr><th id="L111"><a href="#L111">111</a></th><td><span class="sd"></span></td></tr><tr><th id="L112"><a href="#L112">112</a></th><td><span class="sd">&gt;&gt;&gt; velocity = FaceVariable(mesh=mesh, rank=1)</span></td></tr><tr><th id="L113"><a href="#L113">113</a></th><td><span class="sd">&gt;&gt;&gt; velocity[0, mesh.getFacesTop().getValue()] = U</span></td></tr><tr><th id="L114"><a href="#L114">114</a></th><td><span class="sd"></span></td></tr><tr><th id="L115"><a href="#L115">115</a></th><td><span class="sd">Build the Navier-Stokes equations in the cell centers. The previously calculated</span></td></tr><tr><th id="L116"><a href="#L116">116</a></th><td><span class="sd">velocity is taken as the coefficient of a convectionterm. As convectionterm we</span></td></tr><tr><th id="L117"><a href="#L117">117</a></th><td><span class="sd">choose a PowerLawConvectionTerm.</span></td></tr><tr><th id="L118"><a href="#L118">118</a></th><td><span class="sd"></span></td></tr><tr><th id="L119"><a href="#L119">119</a></th><td><span class="sd">&gt;&gt;&gt; xVelocityEq = PowerLawConvectionTerm(coeff=velocity) - \</span></td></tr><tr><th id="L120"><a href="#L120">120</a></th><td><span class="sd">...     DiffusionTerm(coeff=viscosity) + pressure.getGrad().dot([1.,0.])</span></td></tr><tr><th id="L121"><a href="#L121">121</a></th><td><span class="sd">&gt;&gt;&gt; yVelocityEq = PowerLawConvectionTerm(coeff=velocity) - \</span></td></tr><tr><th id="L122"><a href="#L122">122</a></th><td><span class="sd">...     DiffusionTerm(coeff=viscosity) + pressure.getGrad().dot([0.,1.])</span></td></tr><tr><th id="L123"><a href="#L123">123</a></th><td><span class="sd">&gt;&gt;&gt; #xVelocityEq = 2.* xVelocity * PowerLawConvectionTerm(coeff=(1.,0.)) \</span></td></tr><tr><th id="L124"><a href="#L124">124</a></th><td><span class="sd">... #                + yVelocity * PowerLawConvectionTerm(coeff=(0.,1.)) \</span></td></tr><tr><th id="L125"><a href="#L125">125</a></th><td><span class="sd">... #                + yVelocity.getGrad().dot([0.,1.])*xVelocity \</span></td></tr><tr><th id="L126"><a href="#L126">126</a></th><td><span class="sd">... #    - DiffusionTerm(coeff=viscosity) + pressure.getGrad().dot([1.,0.])</span></td></tr><tr><th id="L127"><a href="#L127">127</a></th><td><span class="sd">&gt;&gt;&gt; #yVelocityEq =  2.* yVelocity * PowerLawConvectionTerm(coeff=(0.,1.)) \</span></td></tr><tr><th id="L128"><a href="#L128">128</a></th><td><span class="sd">... #                + xVelocity * PowerLawConvectionTerm(coeff=(1.,0.)) \</span></td></tr><tr><th id="L129"><a href="#L129">129</a></th><td><span class="sd">... #                + xVelocity.getGrad().dot([1.,0.])*yVelocity \</span></td></tr><tr><th id="L130"><a href="#L130">130</a></th><td><span class="sd">... #    - DiffusionTerm(coeff=viscosity) + pressure.getGrad().dot([0.,1.])</span></td></tr><tr><th id="L131"><a href="#L131">131</a></th><td><span class="sd"></span></td></tr><tr><th id="L132"><a href="#L132">132</a></th><td><span class="sd">In this example the SIMPLE algorithm is used to couple the</span></td></tr><tr><th id="L133"><a href="#L133">133</a></th><td><span class="sd">pressure and momentum equations. We obtain the pressure correction equation, </span></td></tr><tr><th id="L134"><a href="#L134">134</a></th><td><span class="sd"></span></td></tr><tr><th id="L135"><a href="#L135">135</a></th><td><span class="sd">.. math::</span></td></tr><tr><th id="L136"><a href="#L136">136</a></th><td><span class="sd">    </span></td></tr><tr><th id="L137"><a href="#L137">137</a></th><td><span class="sd">   \nabla \frac{V_P}{a_P} \cdot \nabla p' = \nabla \cdot \vec{u}^{\ast}</span></td></tr><tr><th id="L138"><a href="#L138">138</a></th><td><span class="sd">   </span></td></tr><tr><th id="L139"><a href="#L139">139</a></th><td><span class="sd">In the discretized version of the above equation :math:`V_P / a_P` is</span></td></tr><tr><th id="L140"><a href="#L140">140</a></th><td><span class="sd">approximated at the face by :math:`A_f d_{AP} / (a_P)_f`. In :term:`FiPy` the</span></td></tr><tr><th id="L141"><a href="#L141">141</a></th><td><span class="sd">pressure correction equation can be written as, </span></td></tr><tr><th id="L142"><a href="#L142">142</a></th><td><span class="sd"></span></td></tr><tr><th id="L143"><a href="#L143">143</a></th><td><span class="sd">&gt;&gt;&gt; ap = CellVariable(mesh=mesh, value=1.)</span></td></tr><tr><th id="L144"><a href="#L144">144</a></th><td><span class="sd">&gt;&gt;&gt; coeff = 1./ ap.getArithmeticFaceValue() *mesh._getFaceAreas() * mesh._getCellDistances() </span></td></tr><tr><th id="L145"><a href="#L145">145</a></th><td><span class="sd">&gt;&gt;&gt; pressureCorrectionEq = DiffusionTerm(coeff=coeff) - velocity.getDivergence()</span></td></tr><tr><th id="L146"><a href="#L146">146</a></th><td><span class="sd"></span></td></tr><tr><th id="L147"><a href="#L147">147</a></th><td><span class="sd">On a colocated grid as :term:`FiPy` uses, it is important to correctly define</span></td></tr><tr><th id="L148"><a href="#L148">148</a></th><td><span class="sd">:term:`velocity`, to avoid pressure oscillations. We apply the Rhie-Chow </span></td></tr><tr><th id="L149"><a href="#L149">149</a></th><td><span class="sd">correction:</span></td></tr><tr><th id="L150"><a href="#L150">150</a></th><td><span class="sd"></span></td></tr><tr><th id="L151"><a href="#L151">151</a></th><td><span class="sd">.. math::</span></td></tr><tr><th id="L152"><a href="#L152">152</a></th><td><span class="sd">    </span></td></tr><tr><th id="L153"><a href="#L153">153</a></th><td><span class="sd">  \vec{u}_f = \frac{1}{2}(\vec{u}^{\ast}_L + \vec{u}^{\ast}_R)) </span></td></tr><tr><th id="L154"><a href="#L154">154</a></th><td><span class="sd">  + \frac{1}{2}\left(\frac{V}{a_P}\right)_{\mathrm{avg\ L,R}} (\nabla p^{\ast}_L+ \nabla p^{\ast}_R)</span></td></tr><tr><th id="L155"><a href="#L155">155</a></th><td><span class="sd">  - \left(\frac{V}{a_P}\right)_{\mathrm{avg\ L,R}} (\nabla p^{\ast}_f) </span></td></tr><tr><th id="L156"><a href="#L156">156</a></th><td><span class="sd"></span></td></tr><tr><th id="L157"><a href="#L157">157</a></th><td><span class="sd">where f is the face, and L and R the adjacent cells. We start by introducing needed</span></td></tr><tr><th id="L158"><a href="#L158">158</a></th><td><span class="sd">terms </span></td></tr><tr><th id="L159"><a href="#L159">159</a></th><td><span class="sd"></span></td></tr><tr><th id="L160"><a href="#L160">160</a></th><td><span class="sd">&gt;&gt;&gt; from fipy.variables.faceGradVariable import _FaceGradVariable</span></td></tr><tr><th id="L161"><a href="#L161">161</a></th><td><span class="sd">&gt;&gt;&gt; volume = CellVariable(mesh=mesh, value=mesh.getCellVolumes(), name='Volume')</span></td></tr><tr><th id="L162"><a href="#L162">162</a></th><td><span class="sd">&gt;&gt;&gt; contrvolume=volume.getArithmeticFaceValue()</span></td></tr><tr><th id="L163"><a href="#L163">163</a></th><td><span class="sd"></span></td></tr><tr><th id="L164"><a href="#L164">164</a></th><td><span class="sd">And set up the velocity with this formula in the SIMPLE loop. </span></td></tr><tr><th id="L165"><a href="#L165">165</a></th><td><span class="sd">Now, set up the no-slip boundary conditions</span></td></tr><tr><th id="L166"><a href="#L166">166</a></th><td><span class="sd"></span></td></tr><tr><th id="L167"><a href="#L167">167</a></th><td><span class="sd">.. index:: FixedValue</span></td></tr><tr><th id="L168"><a href="#L168">168</a></th><td><span class="sd">   </span></td></tr><tr><th id="L169"><a href="#L169">169</a></th><td><span class="sd">&gt;&gt;&gt; bcs = (FixedValue(faces=mesh.getFacesLeft(), value=0.),</span></td></tr><tr><th id="L170"><a href="#L170">170</a></th><td><span class="sd">...        FixedValue(faces=mesh.getFacesRight(), value=0.),</span></td></tr><tr><th id="L171"><a href="#L171">171</a></th><td><span class="sd">...        FixedValue(faces=mesh.getFacesBottom(), value=0.),)</span></td></tr><tr><th id="L172"><a href="#L172">172</a></th><td><span class="sd">&gt;&gt;&gt; bcsX = bcs + (FixedValue(faces=mesh.getFacesTop(), value=U),)</span></td></tr><tr><th id="L173"><a href="#L173">173</a></th><td><span class="sd">&gt;&gt;&gt; bcsY = bcs + (FixedValue(faces=mesh.getFacesTop(), value=0.),)</span></td></tr><tr><th id="L174"><a href="#L174">174</a></th><td><span class="sd">&gt;&gt;&gt; bcsPC = (FixedValue(faces=mesh.getFacesLeft() &amp; (mesh.getFaceCenters()[1]&lt;0.9*dL), value=0.),)</span></td></tr><tr><th id="L175"><a href="#L175">175</a></th><td><span class="sd"></span></td></tr><tr><th id="L176"><a href="#L176">176</a></th><td><span class="sd">Set up the viewers,</span></td></tr><tr><th id="L177"><a href="#L177">177</a></th><td><span class="sd"></span></td></tr><tr><th id="L178"><a href="#L178">178</a></th><td><span class="sd">.. index::</span></td></tr><tr><th id="L179"><a href="#L179">179</a></th><td><span class="sd">   :module: fipy.viewers</span></td></tr><tr><th id="L180"><a href="#L180">180</a></th><td><span class="sd">   </span></td></tr><tr><th id="L181"><a href="#L181">181</a></th><td><span class="sd">&gt;&gt;&gt; if __name__ == '__main__':</span></td></tr><tr><th id="L182"><a href="#L182">182</a></th><td><span class="sd">...     viewer = Viewer(vars=(pressure, yVelocity, velocity, xVelocity),</span></td></tr><tr><th id="L183"><a href="#L183">183</a></th><td><span class="sd">...                xmin=0., xmax=1., ymin=0., ymax=1., colorbar=True)</span></td></tr><tr><th id="L184"><a href="#L184">184</a></th><td><span class="sd"></span></td></tr><tr><th id="L185"><a href="#L185">185</a></th><td><span class="sd">Below, we iterate for a set number of sweeps. We use the :meth:`sweep`</span></td></tr><tr><th id="L186"><a href="#L186">186</a></th><td><span class="sd">method instead of :meth:`solve` because we require the residual for</span></td></tr><tr><th id="L187"><a href="#L187">187</a></th><td><span class="sd">output.  We also use the :meth:`cacheMatrix`, :meth:`getMatrix`,</span></td></tr><tr><th id="L188"><a href="#L188">188</a></th><td><span class="sd">:meth:`cacheRHSvector` and :meth:`getRHSvector` because both the matrix and</span></td></tr><tr><th id="L189"><a href="#L189">189</a></th><td><span class="sd">RHS vector are required by the SIMPLE algorithm. Additionally, the</span></td></tr><tr><th id="L190"><a href="#L190">190</a></th><td><span class="sd">:meth:`sweep` method is passed an ``underRelaxation`` factor to relax the</span></td></tr><tr><th id="L191"><a href="#L191">191</a></th><td><span class="sd">solution. This argument cannot be passed to :meth:`solve`.</span></td></tr><tr><th id="L192"><a href="#L192">192</a></th><td><span class="sd"></span></td></tr><tr><th id="L193"><a href="#L193">193</a></th><td><span class="sd">&gt;&gt;&gt; #solverpc = LinearCGSSolver(tolerance=1e-10)</span></td></tr><tr><th id="L194"><a href="#L194">194</a></th><td><span class="sd"></span></td></tr><tr><th id="L195"><a href="#L195">195</a></th><td><span class="sd">.. index:: sweep, cacheMatrix, getMatrix, cacheRHSvector, getRHSvector</span></td></tr><tr><th id="L196"><a href="#L196">196</a></th><td><span class="sd">   </span></td></tr><tr><th id="L197"><a href="#L197">197</a></th><td><span class="sd">&gt;&gt;&gt; for sweep in range(sweeps):</span></td></tr><tr><th id="L198"><a href="#L198">198</a></th><td><span class="sd">...</span></td></tr><tr><th id="L199"><a href="#L199">199</a></th><td><span class="sd">...     ## solve the Stokes equations to get starred values</span></td></tr><tr><th id="L200"><a href="#L200">200</a></th><td><span class="sd">...     xVelocityEq.cacheMatrix()</span></td></tr><tr><th id="L201"><a href="#L201">201</a></th><td><span class="sd">...     xres = xVelocityEq.sweep(var=xVelocity,</span></td></tr><tr><th id="L202"><a href="#L202">202</a></th><td><span class="sd">...                              boundaryConditions=bcsX,</span></td></tr><tr><th id="L203"><a href="#L203">203</a></th><td><span class="sd">...                              underRelaxation=velocityRelaxation)</span></td></tr><tr><th id="L204"><a href="#L204">204</a></th><td><span class="sd">...     yres = yVelocityEq.sweep(var=yVelocity,</span></td></tr><tr><th id="L205"><a href="#L205">205</a></th><td><span class="sd">...                              boundaryConditions=bcsY,</span></td></tr><tr><th id="L206"><a href="#L206">206</a></th><td><span class="sd">...                              underRelaxation=velocityRelaxation)</span></td></tr><tr><th id="L207"><a href="#L207">207</a></th><td><span class="sd">...     xmat = xVelocityEq.getMatrix()</span></td></tr><tr><th id="L208"><a href="#L208">208</a></th><td><span class="sd">...</span></td></tr><tr><th id="L209"><a href="#L209">209</a></th><td><span class="sd">...     ## update the ap coefficient from the matrix diagonal</span></td></tr><tr><th id="L210"><a href="#L210">210</a></th><td><span class="sd">...     ap[:] = xmat.takeDiagonal()</span></td></tr><tr><th id="L211"><a href="#L211">211</a></th><td><span class="sd">...</span></td></tr><tr><th id="L212"><a href="#L212">212</a></th><td><span class="sd">...     ## update the face velocities based on starred values with the </span></td></tr><tr><th id="L213"><a href="#L213">213</a></th><td><span class="sd">...     ## Rhie-Chow correction. </span></td></tr><tr><th id="L214"><a href="#L214">214</a></th><td><span class="sd">...     xvface = xVelocity.getArithmeticFaceValue()</span></td></tr><tr><th id="L215"><a href="#L215">215</a></th><td><span class="sd">...     yvface = yVelocity.getArithmeticFaceValue()</span></td></tr><tr><th id="L216"><a href="#L216">216</a></th><td><span class="sd">...     ## cell pressure gradient</span></td></tr><tr><th id="L217"><a href="#L217">217</a></th><td><span class="sd">...     presgrad = pressure.getGrad()</span></td></tr><tr><th id="L218"><a href="#L218">218</a></th><td><span class="sd">...     ## face pressure gradient</span></td></tr><tr><th id="L219"><a href="#L219">219</a></th><td><span class="sd">...     facepresgrad = _FaceGradVariable(pressure)</span></td></tr><tr><th id="L220"><a href="#L220">220</a></th><td><span class="sd">...</span></td></tr><tr><th id="L221"><a href="#L221">221</a></th><td><span class="sd">...     velocity[0] = xVelocity.getArithmeticFaceValue() \</span></td></tr><tr><th id="L222"><a href="#L222">222</a></th><td><span class="sd">...          + contrvolume / ap.getArithmeticFaceValue() * \</span></td></tr><tr><th id="L223"><a href="#L223">223</a></th><td><span class="sd">...            (presgrad[0].getArithmeticFaceValue()-facepresgrad[0])</span></td></tr><tr><th id="L224"><a href="#L224">224</a></th><td><span class="sd">...     velocity[1] = yVelocity.getArithmeticFaceValue() \</span></td></tr><tr><th id="L225"><a href="#L225">225</a></th><td><span class="sd">...          + contrvolume / ap.getArithmeticFaceValue() * \</span></td></tr><tr><th id="L226"><a href="#L226">226</a></th><td><span class="sd">...            (presgrad[1].getArithmeticFaceValue()-facepresgrad[1])</span></td></tr><tr><th id="L227"><a href="#L227">227</a></th><td><span class="sd">...     velocity[..., mesh.getExteriorFaces().getValue()] = 0.</span></td></tr><tr><th id="L228"><a href="#L228">228</a></th><td><span class="sd">...     velocity[0, mesh.getFacesTop().getValue()] = U</span></td></tr><tr><th id="L229"><a href="#L229">229</a></th><td><span class="sd">...</span></td></tr><tr><th id="L230"><a href="#L230">230</a></th><td><span class="sd">...     ## solve the pressure correction equation</span></td></tr><tr><th id="L231"><a href="#L231">231</a></th><td><span class="sd">...     pressureCorrectionEq.cacheRHSvector()</span></td></tr><tr><th id="L232"><a href="#L232">232</a></th><td><span class="sd">...     ## left bottom point must remain at pressure 0, so no correction</span></td></tr><tr><th id="L233"><a href="#L233">233</a></th><td><span class="sd">...     pres = pressureCorrectionEq.sweep(var=pressureCorrection, </span></td></tr><tr><th id="L234"><a href="#L234">234</a></th><td><span class="sd">...                                       boundaryConditions=bcsPC,</span></td></tr><tr><th id="L235"><a href="#L235">235</a></th><td><span class="sd">...                                       #solver=solverpc</span></td></tr><tr><th id="L236"><a href="#L236">236</a></th><td><span class="sd">...                                       )</span></td></tr><tr><th id="L237"><a href="#L237">237</a></th><td><span class="sd">...     rhs = pressureCorrectionEq.getRHSvector()</span></td></tr><tr><th id="L238"><a href="#L238">238</a></th><td><span class="sd">...</span></td></tr><tr><th id="L239"><a href="#L239">239</a></th><td><span class="sd">...     ## update the pressure using the corrected value</span></td></tr><tr><th id="L240"><a href="#L240">240</a></th><td><span class="sd">...     pressure.setValue(pressure + pressureRelaxation * pressureCorrection)</span></td></tr><tr><th id="L241"><a href="#L241">241</a></th><td><span class="sd">...     #pressure.setValue(pressure + pressureRelaxation * (pressureCorrection -pressureCorrection.getGlobalValue()[0]))</span></td></tr><tr><th id="L242"><a href="#L242">242</a></th><td><span class="sd">...     ## update the velocity using the corrected pressure</span></td></tr><tr><th id="L243"><a href="#L243">243</a></th><td><span class="sd">...     xVelocity.setValue(xVelocity - pressureCorrection.getGrad()[0] / \</span></td></tr><tr><th id="L244"><a href="#L244">244</a></th><td><span class="sd">...                                                ap * mesh.getCellVolumes())</span></td></tr><tr><th id="L245"><a href="#L245">245</a></th><td><span class="sd">...     yVelocity.setValue(yVelocity - pressureCorrection.getGrad()[1] / \</span></td></tr><tr><th id="L246"><a href="#L246">246</a></th><td><span class="sd">...                                                ap * mesh.getCellVolumes())</span></td></tr><tr><th id="L247"><a href="#L247">247</a></th><td><span class="sd">...</span></td></tr><tr><th id="L248"><a href="#L248">248</a></th><td><span class="sd">...     if __name__ == '__main__':</span></td></tr><tr><th id="L249"><a href="#L249">249</a></th><td><span class="sd">...         if sweep%10 == 0:</span></td></tr><tr><th id="L250"><a href="#L250">250</a></th><td><span class="sd">...             print 'sweep:',sweep,', x residual:',xres, \</span></td></tr><tr><th id="L251"><a href="#L251">251</a></th><td><span class="sd">...                                  ', y residual',yres, \</span></td></tr><tr><th id="L252"><a href="#L252">252</a></th><td><span class="sd">...                                  ', p residual:',pres, \</span></td></tr><tr><th id="L253"><a href="#L253">253</a></th><td><span class="sd">...                                  ', continuity:',max(abs(rhs))</span></td></tr><tr><th id="L254"><a href="#L254">254</a></th><td><span class="sd">...</span></td></tr><tr><th id="L255"><a href="#L255">255</a></th><td><span class="sd">...             viewer.plot()</span></td></tr><tr><th id="L256"><a href="#L256">256</a></th><td><span class="sd"></span></td></tr><tr><th id="L257"><a href="#L257">257</a></th><td><span class="sd">.. image:: lidcavityvx.*</span></td></tr><tr><th id="L258"><a href="#L258">258</a></th><td><span class="sd">   :width: 90%</span></td></tr><tr><th id="L259"><a href="#L259">259</a></th><td><span class="sd">   :align: center</span></td></tr><tr><th id="L260"><a href="#L260">260</a></th><td><span class="sd"></span></td></tr><tr><th id="L261"><a href="#L261">261</a></th><td><span class="sd">.. image:: lidcavityvy.*</span></td></tr><tr><th id="L262"><a href="#L262">262</a></th><td><span class="sd">   :width: 90%</span></td></tr><tr><th id="L263"><a href="#L263">263</a></th><td><span class="sd">   :align: center</span></td></tr><tr><th id="L264"><a href="#L264">264</a></th><td><span class="sd"></span></td></tr><tr><th id="L265"><a href="#L265">265</a></th><td><span class="sd">.. image:: lidcavity.*</span></td></tr><tr><th id="L266"><a href="#L266">266</a></th><td><span class="sd">   :width: 90%</span></td></tr><tr><th id="L267"><a href="#L267">267</a></th><td><span class="sd">   :align: center</span></td></tr><tr><th id="L268"><a href="#L268">268</a></th><td><span class="sd"></span></td></tr><tr><th id="L269"><a href="#L269">269</a></th><td><span class="sd">Test values with the literature</span></td></tr><tr><th id="L270"><a href="#L270">270</a></th><td><span class="sd"></span></td></tr><tr><th id="L271"><a href="#L271">271</a></th><td><span class="sd">&gt;&gt;&gt; import numpy as np</span></td></tr><tr><th id="L272"><a href="#L272">272</a></th><td><span class="sd">&gt;&gt;&gt; ## values of Ghia et al (1982)</span></td></tr><tr><th id="L273"><a href="#L273">273</a></th><td><span class="sd">&gt;&gt;&gt; yexct =  np.array([-0.327052, -0.397406, -0.217948, -0.428914, -0.43629, -0.444335,</span></td></tr><tr><th id="L274"><a href="#L274">274</a></th><td><span class="sd">...     -0.046595, 0.001598, -0.4993, 0.118733, 0.235193, 0.352315, 0.45404, 0.461386,</span></td></tr><tr><th id="L275"><a href="#L275">275</a></th><td><span class="sd">...     0.469392, 0.476719, 0.5], float) + 0.5</span></td></tr><tr><th id="L276"><a href="#L276">276</a></th><td><span class="sd">&gt;&gt;&gt; vxexact = [-0.383699, -0.297251, -0.27788, -0.222276, -0.201989, -0.181701,</span></td></tr><tr><th id="L277"><a href="#L277">277</a></th><td><span class="sd">...     -0.106804, -0.060949,  -0.000882, 0.057217, 0.186849, 0.333239, 0.466401,</span></td></tr><tr><th id="L278"><a href="#L278">278</a></th><td><span class="sd">...     0.511382, 0.574884, 0.659554, 0.999118]</span></td></tr><tr><th id="L279"><a href="#L279">279</a></th><td><span class="sd">&gt;&gt;&gt; xexct = np.array([-0.500577, -0.43768, -0.429602, -0.421523, -0.406521,</span></td></tr><tr><th id="L280"><a href="#L280">280</a></th><td><span class="sd">...     -0.343624, -0.273803, -0.265724, -0.000289, 0.304962, 0.359781, 0.40652,</span></td></tr><tr><th id="L281"><a href="#L281">281</a></th><td><span class="sd">...     0.445182, 0.45326, 0.461339, 0.46884, 0.5],float) + 0.5</span></td></tr><tr><th id="L282"><a href="#L282">282</a></th><td><span class="sd">&gt;&gt;&gt; vyexact = [0.00069404, 0.275621, 0.290847, 0.303994, 0.326826, 0.371038,</span></td></tr><tr><th id="L283"><a href="#L283">283</a></th><td><span class="sd">...     0.330015, 0.32307, 0.0252893, -0.318994, -0.427191, -0.515279, -0.392034,</span></td></tr><tr><th id="L284"><a href="#L284">284</a></th><td><span class="sd">...     -0.336623, -0.277749, -0.214023, -6.20706e-17]</span></td></tr><tr><th id="L285"><a href="#L285">285</a></th><td><span class="sd">&gt;&gt;&gt; # calc values at y=0.5</span></td></tr><tr><th id="L286"><a href="#L286">286</a></th><td><span class="sd">&gt;&gt;&gt; xcalc = mesh.getCellCenters()[0][N*(N//2):N*(N//2+1)]</span></td></tr><tr><th id="L287"><a href="#L287">287</a></th><td><span class="sd">&gt;&gt;&gt; vycalc = yVelocity.getValue()[N*(N//2):N*(N//2+1)]</span></td></tr><tr><th id="L288"><a href="#L288">288</a></th><td><span class="sd">&gt;&gt;&gt; # calc values at x=0.5</span></td></tr><tr><th id="L289"><a href="#L289">289</a></th><td><span class="sd">&gt;&gt;&gt; ycalc = mesh.getCellCenters()[1][N//2::N]</span></td></tr><tr><th id="L290"><a href="#L290">290</a></th><td><span class="sd">&gt;&gt;&gt; vxcalc = xVelocity.getValue()[N//2::N]</span></td></tr><tr><th id="L291"><a href="#L291">291</a></th><td><span class="sd">&gt;&gt;&gt; print vxcalc[N//2], numerix.allclose(vxcalc[N//2], -0.0241933937349)</span></td></tr><tr><th id="L292"><a href="#L292">292</a></th><td><span class="sd">0</span></td></tr><tr><th id="L293"><a href="#L293">293</a></th><td><span class="sd">&gt;&gt;&gt; print vycalc[N//2], numerix.allclose(vycalc[N//2], 0.00163975227638)</span></td></tr><tr><th id="L294"><a href="#L294">294</a></th><td><span class="sd">1</span></td></tr><tr><th id="L295"><a href="#L295">295</a></th><td><span class="sd">&gt;&gt;&gt; ## profiles along y=0.5 of v_y and along x=0.5 of v_x</span></td></tr><tr><th id="L296"><a href="#L296">296</a></th><td><span class="sd">&gt;&gt;&gt; if __name__ == '__main__':</span></td></tr><tr><th id="L297"><a href="#L297">297</a></th><td><span class="sd">...     import pylab</span></td></tr><tr><th id="L298"><a href="#L298">298</a></th><td><span class="sd">...     pylab.figure()</span></td></tr><tr><th id="L299"><a href="#L299">299</a></th><td><span class="sd">...     pylab.axis(xmin=0,xmax=1,ymin=np.min(vyexact)-0.02, ymax=np.max(vyexact)+0.02)</span></td></tr><tr><th id="L300"><a href="#L300">300</a></th><td><span class="sd">...     pylab.title('v_y velocity along y=%s compared with y=0.5 Ghia et al (1982)' % mesh.getCellCenters()[1][N*(N//2)])</span></td></tr><tr><th id="L301"><a href="#L301">301</a></th><td><span class="sd">...     pylab.plot(xcalc, vycalc, 'b-', xexct, vyexact, 'ro')</span></td></tr><tr><th id="L302"><a href="#L302">302</a></th><td><span class="sd">...     pylab.figure()</span></td></tr><tr><th id="L303"><a href="#L303">303</a></th><td><span class="sd">...     pylab.axis(xmin=0,xmax=1,ymin=np.min(vxexact)-0.02, ymax=np.max(vxexact)+0.02)</span></td></tr><tr><th id="L304"><a href="#L304">304</a></th><td><span class="sd">...     pylab.title('v_x velocity along x=%s compared with x=0.5 Ghia et al (1982)' % mesh.getCellCenters()[0][N//2])</span></td></tr><tr><th id="L305"><a href="#L305">305</a></th><td><span class="sd">...     pylab.plot(ycalc, vxcalc, 'b-', yexct, vxexact, 'ro')</span></td></tr><tr><th id="L306"><a href="#L306">306</a></th><td><span class="sd"></span></td></tr><tr><th id="L307"><a href="#L307">307</a></th><td><span class="sd"></span></td></tr><tr><th id="L308"><a href="#L308">308</a></th><td><span class="sd">.. image:: lidcavitylitcmpvx.*</span></td></tr><tr><th id="L309"><a href="#L309">309</a></th><td><span class="sd">   :width: 90%</span></td></tr><tr><th id="L310"><a href="#L310">310</a></th><td><span class="sd">   :align: center</span></td></tr><tr><th id="L311"><a href="#L311">311</a></th><td><span class="sd"></span></td></tr><tr><th id="L312"><a href="#L312">312</a></th><td><span class="sd">.. image:: lidcavitylitcmpvy.*</span></td></tr><tr><th id="L313"><a href="#L313">313</a></th><td><span class="sd">   :width: 90%</span></td></tr><tr><th id="L314"><a href="#L314">314</a></th><td><span class="sd">   :align: center</span></td></tr><tr><th id="L315"><a href="#L315">315</a></th><td><span class="sd">"""</span></td></tr><tr><th id="L316"><a href="#L316">316</a></th><td>__docformat__ <span class="o">=</span> <span class="s">'restructuredtext'</span></td></tr><tr><th id="L317"><a href="#L317">317</a></th><td></td></tr><tr><th id="L318"><a href="#L318">318</a></th><td><span class="k">if</span> __name__ <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span></td></tr><tr><th id="L319"><a href="#L319">319</a></th><td>    <span class="kn">import</span> <span class="nn">fipy.tests.doctestPlus</span></td></tr><tr><th id="L320"><a href="#L320">320</a></th><td>    <span class="k">exec</span><span class="p">(</span>fipy<span class="o">.</span>tests<span class="o">.</span>doctestPlus<span class="o">.</span>_getScript<span class="p">(</span>__name__<span class="p">))</span></td></tr><tr><th id="L321"><a href="#L321">321</a></th><td>    <span class="nb">raw_input</span><span class="p">(</span><span class="s">'finished'</span><span class="p">)</span></td></tr></tbody></table>

        </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/fipy/raw-attachment/ticket/306/lidDrivenCavity.py">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en">
            <div id="projfooter"><!-- Project specific footer start -->
                <script type="text/javascript"> if (window.runOnloadHook) runOnloadHook();</script>
                <script type="text/javascript">
                    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
                    document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
                </script>
                <script type="text/javascript">
                    var pageTracker = _gat._getTracker("UA-2981268-9");
                    pageTracker._initData();
                    pageTracker._trackPageview();
                </script>
            </div><!-- Project specific footer end -->
            <div id="footer_banner">
                <img src="/trac_1.0_htdocs//footer.gif" width="840" height="45" border="0" usemap="#footer" />
                <map name="footer" id="footer">
                    <area shape="rect" coords="2,3,133,42" href="http://www.kent.edu" target="_blank" alt="Kent State University" />
                    <area shape="rect" coords="137,3,240,41" href="http://www.nist.gov" target="_blank" alt="NIST" />
                    <area shape="rect" coords="244,3,372,39" href="http://www.mit.edu" target="_blank" alt="MIT" />
                    <area shape="rect" coords="376,5,606,41" href="http://www.umich.edu" target="_blank" alt="University of Michigan" />
                    <area shape="rect" coords="613,5,715,38" href="http://www.purdue.edu" target="_blank" alt="Purdue" />
                    <area shape="rect" coords="718,4,833,41" href="http://www.iastate.edu" target="_blank" alt="Iowa State University" />
                </map>
            </div>
            <br />
            <div id="altlinks">
                <br />
                <ul>
                    <li><a href="http://matdl.org/repository/about.htm" class="last first"> About </a></li>
                    <li><a href="http://matdl.org/repository/tou.htm" class="last first"> Terms of Use </a></li>
                    <li><a href="http://matdl.org/repository/contact.htm" class="last first"> Contact </a></li>
                    <li><a href="http://matdl.org/repository/priv.htm" class="last first"> Privacy Policy </a></li>
                </ul>
            </div>
	    <div id="tracfooter" lang="en" xml:lang="en">
	    <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/fipy/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
	    <p class="left">
	    Powered by <a href="/fipy/about"><strong>Trac 1.0</strong></a><br />
	    By <a href="http://www.edgewall.org/">Edgewall Software</a>.
	    </p>
	    <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
	    </div>
        </div>
    </body>
</html>